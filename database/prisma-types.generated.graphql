# source: https://eu1.prisma.sh/nikita-kot-5fc7f8/beer-advisor-be/dev
# timestamp: Sat Feb 16 2019 20:29:53 GMT+0100 (CET)

type AggregateBar {
  count: Int!
}

type AggregateBarChange {
  count: Int!
}

type AggregateBarComment {
  count: Int!
}

type AggregateBarRating {
  count: Int!
}

type AggregateBeer {
  count: Int!
}

type AggregateBeerChange {
  count: Int!
}

type AggregateBeerComment {
  count: Int!
}

type AggregateBeerList {
  count: Int!
}

type AggregateBeerListItem {
  count: Int!
}

type AggregateBeerRating {
  count: Int!
}

type AggregateBeerType {
  count: Int!
}

type AggregateBrewery {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Bar implements Node {
  id: ID!
  name: String!
  address: String!
  lat: String!
  long: String!
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: [String!]!
  barRating(where: BarRatingWhereInput, orderBy: BarRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BarRating!]
  barComments(where: BarCommentWhereInput, orderBy: BarCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BarComment!]
  barChanges(where: BarChangeWhereInput, orderBy: BarChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BarChange!]
  beerList: BeerList!
  createdBy: User
  likedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BarChange implements Node {
  id: ID!
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
  bar: Bar!
  beerList: BeerList!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BarChangeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BarChangeEdge]!
  aggregate: AggregateBarChange!
}

input BarChangeCreateInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
  bar: BarCreateOneWithoutBarChangesInput!
  beerList: BeerListCreateOneInput!
  user: UserCreateOneWithoutBarChangesInput
}

input BarChangeCreateManyWithoutBarInput {
  create: [BarChangeCreateWithoutBarInput!]
  connect: [BarChangeWhereUniqueInput!]
}

input BarChangeCreateManyWithoutUserInput {
  create: [BarChangeCreateWithoutUserInput!]
  connect: [BarChangeWhereUniqueInput!]
}

input BarChangeCreateWithoutBarInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
  beerList: BeerListCreateOneInput!
  user: UserCreateOneWithoutBarChangesInput
}

input BarChangeCreateWithoutUserInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
  bar: BarCreateOneWithoutBarChangesInput!
  beerList: BeerListCreateOneInput!
}

"""An edge in a connection."""
type BarChangeEdge {
  """The item at the end of the edge."""
  node: BarChange!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BarChangeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  lat_ASC
  lat_DESC
  long_ASC
  long_DESC
  phone_ASC
  phone_DESC
  openTime_ASC
  openTime_DESC
  closeTime_ASC
  closeTime_DESC
  checked_ASC
  checked_DESC
  accepted_ASC
  accepted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BarChangePreviousValues {
  id: ID!
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BarChangeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BarChangeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarChangeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarChangeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  lat: String

  """All values that are not equal to given value."""
  lat_not: String

  """All values that are contained in given list."""
  lat_in: [String!]

  """All values that are not contained in given list."""
  lat_not_in: [String!]

  """All values less than the given value."""
  lat_lt: String

  """All values less than or equal the given value."""
  lat_lte: String

  """All values greater than the given value."""
  lat_gt: String

  """All values greater than or equal the given value."""
  lat_gte: String

  """All values containing the given string."""
  lat_contains: String

  """All values not containing the given string."""
  lat_not_contains: String

  """All values starting with the given string."""
  lat_starts_with: String

  """All values not starting with the given string."""
  lat_not_starts_with: String

  """All values ending with the given string."""
  lat_ends_with: String

  """All values not ending with the given string."""
  lat_not_ends_with: String
  long: String

  """All values that are not equal to given value."""
  long_not: String

  """All values that are contained in given list."""
  long_in: [String!]

  """All values that are not contained in given list."""
  long_not_in: [String!]

  """All values less than the given value."""
  long_lt: String

  """All values less than or equal the given value."""
  long_lte: String

  """All values greater than the given value."""
  long_gt: String

  """All values greater than or equal the given value."""
  long_gte: String

  """All values containing the given string."""
  long_contains: String

  """All values not containing the given string."""
  long_not_contains: String

  """All values starting with the given string."""
  long_starts_with: String

  """All values not starting with the given string."""
  long_not_starts_with: String

  """All values ending with the given string."""
  long_ends_with: String

  """All values not ending with the given string."""
  long_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  openTime: DateTime

  """All values that are not equal to given value."""
  openTime_not: DateTime

  """All values that are contained in given list."""
  openTime_in: [DateTime!]

  """All values that are not contained in given list."""
  openTime_not_in: [DateTime!]

  """All values less than the given value."""
  openTime_lt: DateTime

  """All values less than or equal the given value."""
  openTime_lte: DateTime

  """All values greater than the given value."""
  openTime_gt: DateTime

  """All values greater than or equal the given value."""
  openTime_gte: DateTime
  closeTime: DateTime

  """All values that are not equal to given value."""
  closeTime_not: DateTime

  """All values that are contained in given list."""
  closeTime_in: [DateTime!]

  """All values that are not contained in given list."""
  closeTime_not_in: [DateTime!]

  """All values less than the given value."""
  closeTime_lt: DateTime

  """All values less than or equal the given value."""
  closeTime_lte: DateTime

  """All values greater than the given value."""
  closeTime_gt: DateTime

  """All values greater than or equal the given value."""
  closeTime_gte: DateTime
  checked: Boolean

  """All values that are not equal to given value."""
  checked_not: Boolean
  accepted: Boolean

  """All values that are not equal to given value."""
  accepted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BarChangeSubscriptionPayload {
  mutation: MutationType!
  node: BarChange
  updatedFields: [String!]
  previousValues: BarChangePreviousValues
}

input BarChangeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BarChangeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarChangeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarChangeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BarChangeWhereInput
}

input BarChangeUpdateInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
  bar: BarUpdateOneRequiredWithoutBarChangesInput
  beerList: BeerListUpdateOneRequiredInput
  user: UserUpdateOneWithoutBarChangesInput
}

input BarChangeUpdateManyDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
}

input BarChangeUpdateManyMutationInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
}

input BarChangeUpdateManyWithoutBarInput {
  create: [BarChangeCreateWithoutBarInput!]
  connect: [BarChangeWhereUniqueInput!]
  set: [BarChangeWhereUniqueInput!]
  disconnect: [BarChangeWhereUniqueInput!]
  delete: [BarChangeWhereUniqueInput!]
  update: [BarChangeUpdateWithWhereUniqueWithoutBarInput!]
  updateMany: [BarChangeUpdateManyWithWhereNestedInput!]
  deleteMany: [BarChangeScalarWhereInput!]
  upsert: [BarChangeUpsertWithWhereUniqueWithoutBarInput!]
}

input BarChangeUpdateManyWithoutUserInput {
  create: [BarChangeCreateWithoutUserInput!]
  connect: [BarChangeWhereUniqueInput!]
  set: [BarChangeWhereUniqueInput!]
  disconnect: [BarChangeWhereUniqueInput!]
  delete: [BarChangeWhereUniqueInput!]
  update: [BarChangeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BarChangeUpdateManyWithWhereNestedInput!]
  deleteMany: [BarChangeScalarWhereInput!]
  upsert: [BarChangeUpsertWithWhereUniqueWithoutUserInput!]
}

input BarChangeUpdateManyWithWhereNestedInput {
  where: BarChangeScalarWhereInput!
  data: BarChangeUpdateManyDataInput!
}

input BarChangeUpdateWithoutBarDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
  beerList: BeerListUpdateOneRequiredInput
  user: UserUpdateOneWithoutBarChangesInput
}

input BarChangeUpdateWithoutUserDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  checked: Boolean
  accepted: Boolean
  bar: BarUpdateOneRequiredWithoutBarChangesInput
  beerList: BeerListUpdateOneRequiredInput
}

input BarChangeUpdateWithWhereUniqueWithoutBarInput {
  where: BarChangeWhereUniqueInput!
  data: BarChangeUpdateWithoutBarDataInput!
}

input BarChangeUpdateWithWhereUniqueWithoutUserInput {
  where: BarChangeWhereUniqueInput!
  data: BarChangeUpdateWithoutUserDataInput!
}

input BarChangeUpsertWithWhereUniqueWithoutBarInput {
  where: BarChangeWhereUniqueInput!
  update: BarChangeUpdateWithoutBarDataInput!
  create: BarChangeCreateWithoutBarInput!
}

input BarChangeUpsertWithWhereUniqueWithoutUserInput {
  where: BarChangeWhereUniqueInput!
  update: BarChangeUpdateWithoutUserDataInput!
  create: BarChangeCreateWithoutUserInput!
}

input BarChangeWhereInput {
  """Logical AND on all given filters."""
  AND: [BarChangeWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarChangeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarChangeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  lat: String

  """All values that are not equal to given value."""
  lat_not: String

  """All values that are contained in given list."""
  lat_in: [String!]

  """All values that are not contained in given list."""
  lat_not_in: [String!]

  """All values less than the given value."""
  lat_lt: String

  """All values less than or equal the given value."""
  lat_lte: String

  """All values greater than the given value."""
  lat_gt: String

  """All values greater than or equal the given value."""
  lat_gte: String

  """All values containing the given string."""
  lat_contains: String

  """All values not containing the given string."""
  lat_not_contains: String

  """All values starting with the given string."""
  lat_starts_with: String

  """All values not starting with the given string."""
  lat_not_starts_with: String

  """All values ending with the given string."""
  lat_ends_with: String

  """All values not ending with the given string."""
  lat_not_ends_with: String
  long: String

  """All values that are not equal to given value."""
  long_not: String

  """All values that are contained in given list."""
  long_in: [String!]

  """All values that are not contained in given list."""
  long_not_in: [String!]

  """All values less than the given value."""
  long_lt: String

  """All values less than or equal the given value."""
  long_lte: String

  """All values greater than the given value."""
  long_gt: String

  """All values greater than or equal the given value."""
  long_gte: String

  """All values containing the given string."""
  long_contains: String

  """All values not containing the given string."""
  long_not_contains: String

  """All values starting with the given string."""
  long_starts_with: String

  """All values not starting with the given string."""
  long_not_starts_with: String

  """All values ending with the given string."""
  long_ends_with: String

  """All values not ending with the given string."""
  long_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  openTime: DateTime

  """All values that are not equal to given value."""
  openTime_not: DateTime

  """All values that are contained in given list."""
  openTime_in: [DateTime!]

  """All values that are not contained in given list."""
  openTime_not_in: [DateTime!]

  """All values less than the given value."""
  openTime_lt: DateTime

  """All values less than or equal the given value."""
  openTime_lte: DateTime

  """All values greater than the given value."""
  openTime_gt: DateTime

  """All values greater than or equal the given value."""
  openTime_gte: DateTime
  closeTime: DateTime

  """All values that are not equal to given value."""
  closeTime_not: DateTime

  """All values that are contained in given list."""
  closeTime_in: [DateTime!]

  """All values that are not contained in given list."""
  closeTime_not_in: [DateTime!]

  """All values less than the given value."""
  closeTime_lt: DateTime

  """All values less than or equal the given value."""
  closeTime_lte: DateTime

  """All values greater than the given value."""
  closeTime_gt: DateTime

  """All values greater than or equal the given value."""
  closeTime_gte: DateTime
  checked: Boolean

  """All values that are not equal to given value."""
  checked_not: Boolean
  accepted: Boolean

  """All values that are not equal to given value."""
  accepted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  bar: BarWhereInput
  beerList: BeerListWhereInput
  user: UserWhereInput
}

input BarChangeWhereUniqueInput {
  id: ID
}

type BarComment implements Node {
  id: ID!
  comment: String!
  bar: Bar!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BarCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BarCommentEdge]!
  aggregate: AggregateBarComment!
}

input BarCommentCreateInput {
  comment: String!
  bar: BarCreateOneWithoutBarCommentsInput!
  user: UserCreateOneWithoutBarCommentsInput
}

input BarCommentCreateManyWithoutBarInput {
  create: [BarCommentCreateWithoutBarInput!]
  connect: [BarCommentWhereUniqueInput!]
}

input BarCommentCreateManyWithoutUserInput {
  create: [BarCommentCreateWithoutUserInput!]
  connect: [BarCommentWhereUniqueInput!]
}

input BarCommentCreateWithoutBarInput {
  comment: String!
  user: UserCreateOneWithoutBarCommentsInput
}

input BarCommentCreateWithoutUserInput {
  comment: String!
  bar: BarCreateOneWithoutBarCommentsInput!
}

"""An edge in a connection."""
type BarCommentEdge {
  """The item at the end of the edge."""
  node: BarComment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BarCommentOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BarCommentPreviousValues {
  id: ID!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BarCommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BarCommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarCommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarCommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BarCommentSubscriptionPayload {
  mutation: MutationType!
  node: BarComment
  updatedFields: [String!]
  previousValues: BarCommentPreviousValues
}

input BarCommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BarCommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarCommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarCommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BarCommentWhereInput
}

input BarCommentUpdateInput {
  comment: String
  bar: BarUpdateOneRequiredWithoutBarCommentsInput
  user: UserUpdateOneWithoutBarCommentsInput
}

input BarCommentUpdateManyDataInput {
  comment: String
}

input BarCommentUpdateManyMutationInput {
  comment: String
}

input BarCommentUpdateManyWithoutBarInput {
  create: [BarCommentCreateWithoutBarInput!]
  connect: [BarCommentWhereUniqueInput!]
  set: [BarCommentWhereUniqueInput!]
  disconnect: [BarCommentWhereUniqueInput!]
  delete: [BarCommentWhereUniqueInput!]
  update: [BarCommentUpdateWithWhereUniqueWithoutBarInput!]
  updateMany: [BarCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [BarCommentScalarWhereInput!]
  upsert: [BarCommentUpsertWithWhereUniqueWithoutBarInput!]
}

input BarCommentUpdateManyWithoutUserInput {
  create: [BarCommentCreateWithoutUserInput!]
  connect: [BarCommentWhereUniqueInput!]
  set: [BarCommentWhereUniqueInput!]
  disconnect: [BarCommentWhereUniqueInput!]
  delete: [BarCommentWhereUniqueInput!]
  update: [BarCommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BarCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [BarCommentScalarWhereInput!]
  upsert: [BarCommentUpsertWithWhereUniqueWithoutUserInput!]
}

input BarCommentUpdateManyWithWhereNestedInput {
  where: BarCommentScalarWhereInput!
  data: BarCommentUpdateManyDataInput!
}

input BarCommentUpdateWithoutBarDataInput {
  comment: String
  user: UserUpdateOneWithoutBarCommentsInput
}

input BarCommentUpdateWithoutUserDataInput {
  comment: String
  bar: BarUpdateOneRequiredWithoutBarCommentsInput
}

input BarCommentUpdateWithWhereUniqueWithoutBarInput {
  where: BarCommentWhereUniqueInput!
  data: BarCommentUpdateWithoutBarDataInput!
}

input BarCommentUpdateWithWhereUniqueWithoutUserInput {
  where: BarCommentWhereUniqueInput!
  data: BarCommentUpdateWithoutUserDataInput!
}

input BarCommentUpsertWithWhereUniqueWithoutBarInput {
  where: BarCommentWhereUniqueInput!
  update: BarCommentUpdateWithoutBarDataInput!
  create: BarCommentCreateWithoutBarInput!
}

input BarCommentUpsertWithWhereUniqueWithoutUserInput {
  where: BarCommentWhereUniqueInput!
  update: BarCommentUpdateWithoutUserDataInput!
  create: BarCommentCreateWithoutUserInput!
}

input BarCommentWhereInput {
  """Logical AND on all given filters."""
  AND: [BarCommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarCommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarCommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  bar: BarWhereInput
  user: UserWhereInput
}

input BarCommentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type BarConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BarEdge]!
  aggregate: AggregateBar!
}

input BarCreateInput {
  name: String!
  address: String!
  lat: String!
  long: String!
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarCreatephotosInput
  barRating: BarRatingCreateManyWithoutBarInput
  barComments: BarCommentCreateManyWithoutBarInput
  barChanges: BarChangeCreateManyWithoutBarInput
  beerList: BeerListCreateOneWithoutBarInput!
  createdBy: UserCreateOneWithoutCreatedBarsInput
  likedBy: UserCreateManyWithoutLikedBarsInput
}

input BarCreateManyWithoutCreatedByInput {
  create: [BarCreateWithoutCreatedByInput!]
  connect: [BarWhereUniqueInput!]
}

input BarCreateManyWithoutLikedByInput {
  create: [BarCreateWithoutLikedByInput!]
  connect: [BarWhereUniqueInput!]
}

input BarCreateOneWithoutBarChangesInput {
  create: BarCreateWithoutBarChangesInput
  connect: BarWhereUniqueInput
}

input BarCreateOneWithoutBarCommentsInput {
  create: BarCreateWithoutBarCommentsInput
  connect: BarWhereUniqueInput
}

input BarCreateOneWithoutBarRatingInput {
  create: BarCreateWithoutBarRatingInput
  connect: BarWhereUniqueInput
}

input BarCreateOneWithoutBeerListInput {
  create: BarCreateWithoutBeerListInput
  connect: BarWhereUniqueInput
}

input BarCreatephotosInput {
  set: [String!]
}

input BarCreateWithoutBarChangesInput {
  name: String!
  address: String!
  lat: String!
  long: String!
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarCreatephotosInput
  barRating: BarRatingCreateManyWithoutBarInput
  barComments: BarCommentCreateManyWithoutBarInput
  beerList: BeerListCreateOneWithoutBarInput!
  createdBy: UserCreateOneWithoutCreatedBarsInput
  likedBy: UserCreateManyWithoutLikedBarsInput
}

input BarCreateWithoutBarCommentsInput {
  name: String!
  address: String!
  lat: String!
  long: String!
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarCreatephotosInput
  barRating: BarRatingCreateManyWithoutBarInput
  barChanges: BarChangeCreateManyWithoutBarInput
  beerList: BeerListCreateOneWithoutBarInput!
  createdBy: UserCreateOneWithoutCreatedBarsInput
  likedBy: UserCreateManyWithoutLikedBarsInput
}

input BarCreateWithoutBarRatingInput {
  name: String!
  address: String!
  lat: String!
  long: String!
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarCreatephotosInput
  barComments: BarCommentCreateManyWithoutBarInput
  barChanges: BarChangeCreateManyWithoutBarInput
  beerList: BeerListCreateOneWithoutBarInput!
  createdBy: UserCreateOneWithoutCreatedBarsInput
  likedBy: UserCreateManyWithoutLikedBarsInput
}

input BarCreateWithoutBeerListInput {
  name: String!
  address: String!
  lat: String!
  long: String!
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarCreatephotosInput
  barRating: BarRatingCreateManyWithoutBarInput
  barComments: BarCommentCreateManyWithoutBarInput
  barChanges: BarChangeCreateManyWithoutBarInput
  createdBy: UserCreateOneWithoutCreatedBarsInput
  likedBy: UserCreateManyWithoutLikedBarsInput
}

input BarCreateWithoutCreatedByInput {
  name: String!
  address: String!
  lat: String!
  long: String!
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarCreatephotosInput
  barRating: BarRatingCreateManyWithoutBarInput
  barComments: BarCommentCreateManyWithoutBarInput
  barChanges: BarChangeCreateManyWithoutBarInput
  beerList: BeerListCreateOneWithoutBarInput!
  likedBy: UserCreateManyWithoutLikedBarsInput
}

input BarCreateWithoutLikedByInput {
  name: String!
  address: String!
  lat: String!
  long: String!
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarCreatephotosInput
  barRating: BarRatingCreateManyWithoutBarInput
  barComments: BarCommentCreateManyWithoutBarInput
  barChanges: BarChangeCreateManyWithoutBarInput
  beerList: BeerListCreateOneWithoutBarInput!
  createdBy: UserCreateOneWithoutCreatedBarsInput
}

"""An edge in a connection."""
type BarEdge {
  """The item at the end of the edge."""
  node: Bar!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BarOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  lat_ASC
  lat_DESC
  long_ASC
  long_DESC
  phone_ASC
  phone_DESC
  openTime_ASC
  openTime_DESC
  closeTime_ASC
  closeTime_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BarPreviousValues {
  id: ID!
  name: String!
  address: String!
  lat: String!
  long: String!
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BarRating implements Node {
  id: ID!
  rating: Float!
  user: User
  bar: Bar!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BarRatingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BarRatingEdge]!
  aggregate: AggregateBarRating!
}

input BarRatingCreateInput {
  rating: Float!
  user: UserCreateOneWithoutBarRatingsInput
  bar: BarCreateOneWithoutBarRatingInput!
}

input BarRatingCreateManyWithoutBarInput {
  create: [BarRatingCreateWithoutBarInput!]
  connect: [BarRatingWhereUniqueInput!]
}

input BarRatingCreateManyWithoutUserInput {
  create: [BarRatingCreateWithoutUserInput!]
  connect: [BarRatingWhereUniqueInput!]
}

input BarRatingCreateWithoutBarInput {
  rating: Float!
  user: UserCreateOneWithoutBarRatingsInput
}

input BarRatingCreateWithoutUserInput {
  rating: Float!
  bar: BarCreateOneWithoutBarRatingInput!
}

"""An edge in a connection."""
type BarRatingEdge {
  """The item at the end of the edge."""
  node: BarRating!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BarRatingOrderByInput {
  id_ASC
  id_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BarRatingPreviousValues {
  id: ID!
  rating: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BarRatingScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BarRatingScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarRatingScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarRatingScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BarRatingSubscriptionPayload {
  mutation: MutationType!
  node: BarRating
  updatedFields: [String!]
  previousValues: BarRatingPreviousValues
}

input BarRatingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BarRatingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarRatingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarRatingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BarRatingWhereInput
}

input BarRatingUpdateInput {
  rating: Float
  user: UserUpdateOneWithoutBarRatingsInput
  bar: BarUpdateOneRequiredWithoutBarRatingInput
}

input BarRatingUpdateManyDataInput {
  rating: Float
}

input BarRatingUpdateManyMutationInput {
  rating: Float
}

input BarRatingUpdateManyWithoutBarInput {
  create: [BarRatingCreateWithoutBarInput!]
  connect: [BarRatingWhereUniqueInput!]
  set: [BarRatingWhereUniqueInput!]
  disconnect: [BarRatingWhereUniqueInput!]
  delete: [BarRatingWhereUniqueInput!]
  update: [BarRatingUpdateWithWhereUniqueWithoutBarInput!]
  updateMany: [BarRatingUpdateManyWithWhereNestedInput!]
  deleteMany: [BarRatingScalarWhereInput!]
  upsert: [BarRatingUpsertWithWhereUniqueWithoutBarInput!]
}

input BarRatingUpdateManyWithoutUserInput {
  create: [BarRatingCreateWithoutUserInput!]
  connect: [BarRatingWhereUniqueInput!]
  set: [BarRatingWhereUniqueInput!]
  disconnect: [BarRatingWhereUniqueInput!]
  delete: [BarRatingWhereUniqueInput!]
  update: [BarRatingUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BarRatingUpdateManyWithWhereNestedInput!]
  deleteMany: [BarRatingScalarWhereInput!]
  upsert: [BarRatingUpsertWithWhereUniqueWithoutUserInput!]
}

input BarRatingUpdateManyWithWhereNestedInput {
  where: BarRatingScalarWhereInput!
  data: BarRatingUpdateManyDataInput!
}

input BarRatingUpdateWithoutBarDataInput {
  rating: Float
  user: UserUpdateOneWithoutBarRatingsInput
}

input BarRatingUpdateWithoutUserDataInput {
  rating: Float
  bar: BarUpdateOneRequiredWithoutBarRatingInput
}

input BarRatingUpdateWithWhereUniqueWithoutBarInput {
  where: BarRatingWhereUniqueInput!
  data: BarRatingUpdateWithoutBarDataInput!
}

input BarRatingUpdateWithWhereUniqueWithoutUserInput {
  where: BarRatingWhereUniqueInput!
  data: BarRatingUpdateWithoutUserDataInput!
}

input BarRatingUpsertWithWhereUniqueWithoutBarInput {
  where: BarRatingWhereUniqueInput!
  update: BarRatingUpdateWithoutBarDataInput!
  create: BarRatingCreateWithoutBarInput!
}

input BarRatingUpsertWithWhereUniqueWithoutUserInput {
  where: BarRatingWhereUniqueInput!
  update: BarRatingUpdateWithoutUserDataInput!
  create: BarRatingCreateWithoutUserInput!
}

input BarRatingWhereInput {
  """Logical AND on all given filters."""
  AND: [BarRatingWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarRatingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarRatingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  bar: BarWhereInput
}

input BarRatingWhereUniqueInput {
  id: ID
}

input BarScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BarScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  lat: String

  """All values that are not equal to given value."""
  lat_not: String

  """All values that are contained in given list."""
  lat_in: [String!]

  """All values that are not contained in given list."""
  lat_not_in: [String!]

  """All values less than the given value."""
  lat_lt: String

  """All values less than or equal the given value."""
  lat_lte: String

  """All values greater than the given value."""
  lat_gt: String

  """All values greater than or equal the given value."""
  lat_gte: String

  """All values containing the given string."""
  lat_contains: String

  """All values not containing the given string."""
  lat_not_contains: String

  """All values starting with the given string."""
  lat_starts_with: String

  """All values not starting with the given string."""
  lat_not_starts_with: String

  """All values ending with the given string."""
  lat_ends_with: String

  """All values not ending with the given string."""
  lat_not_ends_with: String
  long: String

  """All values that are not equal to given value."""
  long_not: String

  """All values that are contained in given list."""
  long_in: [String!]

  """All values that are not contained in given list."""
  long_not_in: [String!]

  """All values less than the given value."""
  long_lt: String

  """All values less than or equal the given value."""
  long_lte: String

  """All values greater than the given value."""
  long_gt: String

  """All values greater than or equal the given value."""
  long_gte: String

  """All values containing the given string."""
  long_contains: String

  """All values not containing the given string."""
  long_not_contains: String

  """All values starting with the given string."""
  long_starts_with: String

  """All values not starting with the given string."""
  long_not_starts_with: String

  """All values ending with the given string."""
  long_ends_with: String

  """All values not ending with the given string."""
  long_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  openTime: DateTime

  """All values that are not equal to given value."""
  openTime_not: DateTime

  """All values that are contained in given list."""
  openTime_in: [DateTime!]

  """All values that are not contained in given list."""
  openTime_not_in: [DateTime!]

  """All values less than the given value."""
  openTime_lt: DateTime

  """All values less than or equal the given value."""
  openTime_lte: DateTime

  """All values greater than the given value."""
  openTime_gt: DateTime

  """All values greater than or equal the given value."""
  openTime_gte: DateTime
  closeTime: DateTime

  """All values that are not equal to given value."""
  closeTime_not: DateTime

  """All values that are contained in given list."""
  closeTime_in: [DateTime!]

  """All values that are not contained in given list."""
  closeTime_not_in: [DateTime!]

  """All values less than the given value."""
  closeTime_lt: DateTime

  """All values less than or equal the given value."""
  closeTime_lte: DateTime

  """All values greater than the given value."""
  closeTime_gt: DateTime

  """All values greater than or equal the given value."""
  closeTime_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BarSubscriptionPayload {
  mutation: MutationType!
  node: Bar
  updatedFields: [String!]
  previousValues: BarPreviousValues
}

input BarSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BarSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BarWhereInput
}

input BarUpdateInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarUpdatephotosInput
  barRating: BarRatingUpdateManyWithoutBarInput
  barComments: BarCommentUpdateManyWithoutBarInput
  barChanges: BarChangeUpdateManyWithoutBarInput
  beerList: BeerListUpdateOneRequiredWithoutBarInput
  createdBy: UserUpdateOneWithoutCreatedBarsInput
  likedBy: UserUpdateManyWithoutLikedBarsInput
}

input BarUpdateManyDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarUpdatephotosInput
}

input BarUpdateManyMutationInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarUpdatephotosInput
}

input BarUpdateManyWithoutCreatedByInput {
  create: [BarCreateWithoutCreatedByInput!]
  connect: [BarWhereUniqueInput!]
  set: [BarWhereUniqueInput!]
  disconnect: [BarWhereUniqueInput!]
  delete: [BarWhereUniqueInput!]
  update: [BarUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [BarUpdateManyWithWhereNestedInput!]
  deleteMany: [BarScalarWhereInput!]
  upsert: [BarUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input BarUpdateManyWithoutLikedByInput {
  create: [BarCreateWithoutLikedByInput!]
  connect: [BarWhereUniqueInput!]
  set: [BarWhereUniqueInput!]
  disconnect: [BarWhereUniqueInput!]
  delete: [BarWhereUniqueInput!]
  update: [BarUpdateWithWhereUniqueWithoutLikedByInput!]
  updateMany: [BarUpdateManyWithWhereNestedInput!]
  deleteMany: [BarScalarWhereInput!]
  upsert: [BarUpsertWithWhereUniqueWithoutLikedByInput!]
}

input BarUpdateManyWithWhereNestedInput {
  where: BarScalarWhereInput!
  data: BarUpdateManyDataInput!
}

input BarUpdateOneRequiredWithoutBarChangesInput {
  create: BarCreateWithoutBarChangesInput
  connect: BarWhereUniqueInput
  update: BarUpdateWithoutBarChangesDataInput
  upsert: BarUpsertWithoutBarChangesInput
}

input BarUpdateOneRequiredWithoutBarCommentsInput {
  create: BarCreateWithoutBarCommentsInput
  connect: BarWhereUniqueInput
  update: BarUpdateWithoutBarCommentsDataInput
  upsert: BarUpsertWithoutBarCommentsInput
}

input BarUpdateOneRequiredWithoutBarRatingInput {
  create: BarCreateWithoutBarRatingInput
  connect: BarWhereUniqueInput
  update: BarUpdateWithoutBarRatingDataInput
  upsert: BarUpsertWithoutBarRatingInput
}

input BarUpdateOneWithoutBeerListInput {
  create: BarCreateWithoutBeerListInput
  connect: BarWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BarUpdateWithoutBeerListDataInput
  upsert: BarUpsertWithoutBeerListInput
}

input BarUpdatephotosInput {
  set: [String!]
}

input BarUpdateWithoutBarChangesDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarUpdatephotosInput
  barRating: BarRatingUpdateManyWithoutBarInput
  barComments: BarCommentUpdateManyWithoutBarInput
  beerList: BeerListUpdateOneRequiredWithoutBarInput
  createdBy: UserUpdateOneWithoutCreatedBarsInput
  likedBy: UserUpdateManyWithoutLikedBarsInput
}

input BarUpdateWithoutBarCommentsDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarUpdatephotosInput
  barRating: BarRatingUpdateManyWithoutBarInput
  barChanges: BarChangeUpdateManyWithoutBarInput
  beerList: BeerListUpdateOneRequiredWithoutBarInput
  createdBy: UserUpdateOneWithoutCreatedBarsInput
  likedBy: UserUpdateManyWithoutLikedBarsInput
}

input BarUpdateWithoutBarRatingDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarUpdatephotosInput
  barComments: BarCommentUpdateManyWithoutBarInput
  barChanges: BarChangeUpdateManyWithoutBarInput
  beerList: BeerListUpdateOneRequiredWithoutBarInput
  createdBy: UserUpdateOneWithoutCreatedBarsInput
  likedBy: UserUpdateManyWithoutLikedBarsInput
}

input BarUpdateWithoutBeerListDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarUpdatephotosInput
  barRating: BarRatingUpdateManyWithoutBarInput
  barComments: BarCommentUpdateManyWithoutBarInput
  barChanges: BarChangeUpdateManyWithoutBarInput
  createdBy: UserUpdateOneWithoutCreatedBarsInput
  likedBy: UserUpdateManyWithoutLikedBarsInput
}

input BarUpdateWithoutCreatedByDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarUpdatephotosInput
  barRating: BarRatingUpdateManyWithoutBarInput
  barComments: BarCommentUpdateManyWithoutBarInput
  barChanges: BarChangeUpdateManyWithoutBarInput
  beerList: BeerListUpdateOneRequiredWithoutBarInput
  likedBy: UserUpdateManyWithoutLikedBarsInput
}

input BarUpdateWithoutLikedByDataInput {
  name: String
  address: String
  lat: String
  long: String
  phone: String
  openTime: DateTime
  closeTime: DateTime
  photos: BarUpdatephotosInput
  barRating: BarRatingUpdateManyWithoutBarInput
  barComments: BarCommentUpdateManyWithoutBarInput
  barChanges: BarChangeUpdateManyWithoutBarInput
  beerList: BeerListUpdateOneRequiredWithoutBarInput
  createdBy: UserUpdateOneWithoutCreatedBarsInput
}

input BarUpdateWithWhereUniqueWithoutCreatedByInput {
  where: BarWhereUniqueInput!
  data: BarUpdateWithoutCreatedByDataInput!
}

input BarUpdateWithWhereUniqueWithoutLikedByInput {
  where: BarWhereUniqueInput!
  data: BarUpdateWithoutLikedByDataInput!
}

input BarUpsertWithoutBarChangesInput {
  update: BarUpdateWithoutBarChangesDataInput!
  create: BarCreateWithoutBarChangesInput!
}

input BarUpsertWithoutBarCommentsInput {
  update: BarUpdateWithoutBarCommentsDataInput!
  create: BarCreateWithoutBarCommentsInput!
}

input BarUpsertWithoutBarRatingInput {
  update: BarUpdateWithoutBarRatingDataInput!
  create: BarCreateWithoutBarRatingInput!
}

input BarUpsertWithoutBeerListInput {
  update: BarUpdateWithoutBeerListDataInput!
  create: BarCreateWithoutBeerListInput!
}

input BarUpsertWithWhereUniqueWithoutCreatedByInput {
  where: BarWhereUniqueInput!
  update: BarUpdateWithoutCreatedByDataInput!
  create: BarCreateWithoutCreatedByInput!
}

input BarUpsertWithWhereUniqueWithoutLikedByInput {
  where: BarWhereUniqueInput!
  update: BarUpdateWithoutLikedByDataInput!
  create: BarCreateWithoutLikedByInput!
}

input BarWhereInput {
  """Logical AND on all given filters."""
  AND: [BarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  lat: String

  """All values that are not equal to given value."""
  lat_not: String

  """All values that are contained in given list."""
  lat_in: [String!]

  """All values that are not contained in given list."""
  lat_not_in: [String!]

  """All values less than the given value."""
  lat_lt: String

  """All values less than or equal the given value."""
  lat_lte: String

  """All values greater than the given value."""
  lat_gt: String

  """All values greater than or equal the given value."""
  lat_gte: String

  """All values containing the given string."""
  lat_contains: String

  """All values not containing the given string."""
  lat_not_contains: String

  """All values starting with the given string."""
  lat_starts_with: String

  """All values not starting with the given string."""
  lat_not_starts_with: String

  """All values ending with the given string."""
  lat_ends_with: String

  """All values not ending with the given string."""
  lat_not_ends_with: String
  long: String

  """All values that are not equal to given value."""
  long_not: String

  """All values that are contained in given list."""
  long_in: [String!]

  """All values that are not contained in given list."""
  long_not_in: [String!]

  """All values less than the given value."""
  long_lt: String

  """All values less than or equal the given value."""
  long_lte: String

  """All values greater than the given value."""
  long_gt: String

  """All values greater than or equal the given value."""
  long_gte: String

  """All values containing the given string."""
  long_contains: String

  """All values not containing the given string."""
  long_not_contains: String

  """All values starting with the given string."""
  long_starts_with: String

  """All values not starting with the given string."""
  long_not_starts_with: String

  """All values ending with the given string."""
  long_ends_with: String

  """All values not ending with the given string."""
  long_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  openTime: DateTime

  """All values that are not equal to given value."""
  openTime_not: DateTime

  """All values that are contained in given list."""
  openTime_in: [DateTime!]

  """All values that are not contained in given list."""
  openTime_not_in: [DateTime!]

  """All values less than the given value."""
  openTime_lt: DateTime

  """All values less than or equal the given value."""
  openTime_lte: DateTime

  """All values greater than the given value."""
  openTime_gt: DateTime

  """All values greater than or equal the given value."""
  openTime_gte: DateTime
  closeTime: DateTime

  """All values that are not equal to given value."""
  closeTime_not: DateTime

  """All values that are contained in given list."""
  closeTime_in: [DateTime!]

  """All values that are not contained in given list."""
  closeTime_not_in: [DateTime!]

  """All values less than the given value."""
  closeTime_lt: DateTime

  """All values less than or equal the given value."""
  closeTime_lte: DateTime

  """All values greater than the given value."""
  closeTime_gt: DateTime

  """All values greater than or equal the given value."""
  closeTime_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  barRating_every: BarRatingWhereInput
  barRating_some: BarRatingWhereInput
  barRating_none: BarRatingWhereInput
  barComments_every: BarCommentWhereInput
  barComments_some: BarCommentWhereInput
  barComments_none: BarCommentWhereInput
  barChanges_every: BarChangeWhereInput
  barChanges_some: BarChangeWhereInput
  barChanges_none: BarChangeWhereInput
  beerList: BeerListWhereInput
  createdBy: UserWhereInput
  likedBy_every: UserWhereInput
  likedBy_some: UserWhereInput
  likedBy_none: UserWhereInput
}

input BarWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Beer implements Node {
  id: ID!
  name: String!
  strong: String
  photo: String
  avgRating: Float
  brewery: Brewery
  type: BeerType
  beerRating(where: BeerRatingWhereInput, orderBy: BeerRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerRating!]
  beerComments(where: BeerCommentWhereInput, orderBy: BeerCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerComment!]
  beerChanges(where: BeerChangeWhereInput, orderBy: BeerChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerChange!]
  includedIn(where: BeerListItemWhereInput, orderBy: BeerListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerListItem!]
  createdBy: User
  likedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BeerChange implements Node {
  id: ID!
  name: String
  strong: String
  photo: String
  avgRating: Float
  brewery: Brewery
  type: BeerType
  checked: Boolean
  accepted: Boolean
  beer: Beer!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BeerChangeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeerChangeEdge]!
  aggregate: AggregateBeerChange!
}

input BeerChangeCreateInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  checked: Boolean
  accepted: Boolean
  brewery: BreweryCreateOneInput
  type: BeerTypeCreateOneInput
  beer: BeerCreateOneWithoutBeerChangesInput!
  user: UserCreateOneWithoutBeerChangesInput
}

input BeerChangeCreateManyWithoutBeerInput {
  create: [BeerChangeCreateWithoutBeerInput!]
  connect: [BeerChangeWhereUniqueInput!]
}

input BeerChangeCreateManyWithoutUserInput {
  create: [BeerChangeCreateWithoutUserInput!]
  connect: [BeerChangeWhereUniqueInput!]
}

input BeerChangeCreateWithoutBeerInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  checked: Boolean
  accepted: Boolean
  brewery: BreweryCreateOneInput
  type: BeerTypeCreateOneInput
  user: UserCreateOneWithoutBeerChangesInput
}

input BeerChangeCreateWithoutUserInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  checked: Boolean
  accepted: Boolean
  brewery: BreweryCreateOneInput
  type: BeerTypeCreateOneInput
  beer: BeerCreateOneWithoutBeerChangesInput!
}

"""An edge in a connection."""
type BeerChangeEdge {
  """The item at the end of the edge."""
  node: BeerChange!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BeerChangeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  strong_ASC
  strong_DESC
  photo_ASC
  photo_DESC
  avgRating_ASC
  avgRating_DESC
  checked_ASC
  checked_DESC
  accepted_ASC
  accepted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BeerChangePreviousValues {
  id: ID!
  name: String
  strong: String
  photo: String
  avgRating: Float
  checked: Boolean
  accepted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BeerChangeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerChangeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerChangeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerChangeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  strong: String

  """All values that are not equal to given value."""
  strong_not: String

  """All values that are contained in given list."""
  strong_in: [String!]

  """All values that are not contained in given list."""
  strong_not_in: [String!]

  """All values less than the given value."""
  strong_lt: String

  """All values less than or equal the given value."""
  strong_lte: String

  """All values greater than the given value."""
  strong_gt: String

  """All values greater than or equal the given value."""
  strong_gte: String

  """All values containing the given string."""
  strong_contains: String

  """All values not containing the given string."""
  strong_not_contains: String

  """All values starting with the given string."""
  strong_starts_with: String

  """All values not starting with the given string."""
  strong_not_starts_with: String

  """All values ending with the given string."""
  strong_ends_with: String

  """All values not ending with the given string."""
  strong_not_ends_with: String
  photo: String

  """All values that are not equal to given value."""
  photo_not: String

  """All values that are contained in given list."""
  photo_in: [String!]

  """All values that are not contained in given list."""
  photo_not_in: [String!]

  """All values less than the given value."""
  photo_lt: String

  """All values less than or equal the given value."""
  photo_lte: String

  """All values greater than the given value."""
  photo_gt: String

  """All values greater than or equal the given value."""
  photo_gte: String

  """All values containing the given string."""
  photo_contains: String

  """All values not containing the given string."""
  photo_not_contains: String

  """All values starting with the given string."""
  photo_starts_with: String

  """All values not starting with the given string."""
  photo_not_starts_with: String

  """All values ending with the given string."""
  photo_ends_with: String

  """All values not ending with the given string."""
  photo_not_ends_with: String
  avgRating: Float

  """All values that are not equal to given value."""
  avgRating_not: Float

  """All values that are contained in given list."""
  avgRating_in: [Float!]

  """All values that are not contained in given list."""
  avgRating_not_in: [Float!]

  """All values less than the given value."""
  avgRating_lt: Float

  """All values less than or equal the given value."""
  avgRating_lte: Float

  """All values greater than the given value."""
  avgRating_gt: Float

  """All values greater than or equal the given value."""
  avgRating_gte: Float
  checked: Boolean

  """All values that are not equal to given value."""
  checked_not: Boolean
  accepted: Boolean

  """All values that are not equal to given value."""
  accepted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BeerChangeSubscriptionPayload {
  mutation: MutationType!
  node: BeerChange
  updatedFields: [String!]
  previousValues: BeerChangePreviousValues
}

input BeerChangeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerChangeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerChangeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerChangeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BeerChangeWhereInput
}

input BeerChangeUpdateInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  checked: Boolean
  accepted: Boolean
  brewery: BreweryUpdateOneInput
  type: BeerTypeUpdateOneInput
  beer: BeerUpdateOneRequiredWithoutBeerChangesInput
  user: UserUpdateOneWithoutBeerChangesInput
}

input BeerChangeUpdateManyDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  checked: Boolean
  accepted: Boolean
}

input BeerChangeUpdateManyMutationInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  checked: Boolean
  accepted: Boolean
}

input BeerChangeUpdateManyWithoutBeerInput {
  create: [BeerChangeCreateWithoutBeerInput!]
  connect: [BeerChangeWhereUniqueInput!]
  set: [BeerChangeWhereUniqueInput!]
  disconnect: [BeerChangeWhereUniqueInput!]
  delete: [BeerChangeWhereUniqueInput!]
  update: [BeerChangeUpdateWithWhereUniqueWithoutBeerInput!]
  updateMany: [BeerChangeUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerChangeScalarWhereInput!]
  upsert: [BeerChangeUpsertWithWhereUniqueWithoutBeerInput!]
}

input BeerChangeUpdateManyWithoutUserInput {
  create: [BeerChangeCreateWithoutUserInput!]
  connect: [BeerChangeWhereUniqueInput!]
  set: [BeerChangeWhereUniqueInput!]
  disconnect: [BeerChangeWhereUniqueInput!]
  delete: [BeerChangeWhereUniqueInput!]
  update: [BeerChangeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BeerChangeUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerChangeScalarWhereInput!]
  upsert: [BeerChangeUpsertWithWhereUniqueWithoutUserInput!]
}

input BeerChangeUpdateManyWithWhereNestedInput {
  where: BeerChangeScalarWhereInput!
  data: BeerChangeUpdateManyDataInput!
}

input BeerChangeUpdateWithoutBeerDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  checked: Boolean
  accepted: Boolean
  brewery: BreweryUpdateOneInput
  type: BeerTypeUpdateOneInput
  user: UserUpdateOneWithoutBeerChangesInput
}

input BeerChangeUpdateWithoutUserDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  checked: Boolean
  accepted: Boolean
  brewery: BreweryUpdateOneInput
  type: BeerTypeUpdateOneInput
  beer: BeerUpdateOneRequiredWithoutBeerChangesInput
}

input BeerChangeUpdateWithWhereUniqueWithoutBeerInput {
  where: BeerChangeWhereUniqueInput!
  data: BeerChangeUpdateWithoutBeerDataInput!
}

input BeerChangeUpdateWithWhereUniqueWithoutUserInput {
  where: BeerChangeWhereUniqueInput!
  data: BeerChangeUpdateWithoutUserDataInput!
}

input BeerChangeUpsertWithWhereUniqueWithoutBeerInput {
  where: BeerChangeWhereUniqueInput!
  update: BeerChangeUpdateWithoutBeerDataInput!
  create: BeerChangeCreateWithoutBeerInput!
}

input BeerChangeUpsertWithWhereUniqueWithoutUserInput {
  where: BeerChangeWhereUniqueInput!
  update: BeerChangeUpdateWithoutUserDataInput!
  create: BeerChangeCreateWithoutUserInput!
}

input BeerChangeWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerChangeWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerChangeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerChangeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  strong: String

  """All values that are not equal to given value."""
  strong_not: String

  """All values that are contained in given list."""
  strong_in: [String!]

  """All values that are not contained in given list."""
  strong_not_in: [String!]

  """All values less than the given value."""
  strong_lt: String

  """All values less than or equal the given value."""
  strong_lte: String

  """All values greater than the given value."""
  strong_gt: String

  """All values greater than or equal the given value."""
  strong_gte: String

  """All values containing the given string."""
  strong_contains: String

  """All values not containing the given string."""
  strong_not_contains: String

  """All values starting with the given string."""
  strong_starts_with: String

  """All values not starting with the given string."""
  strong_not_starts_with: String

  """All values ending with the given string."""
  strong_ends_with: String

  """All values not ending with the given string."""
  strong_not_ends_with: String
  photo: String

  """All values that are not equal to given value."""
  photo_not: String

  """All values that are contained in given list."""
  photo_in: [String!]

  """All values that are not contained in given list."""
  photo_not_in: [String!]

  """All values less than the given value."""
  photo_lt: String

  """All values less than or equal the given value."""
  photo_lte: String

  """All values greater than the given value."""
  photo_gt: String

  """All values greater than or equal the given value."""
  photo_gte: String

  """All values containing the given string."""
  photo_contains: String

  """All values not containing the given string."""
  photo_not_contains: String

  """All values starting with the given string."""
  photo_starts_with: String

  """All values not starting with the given string."""
  photo_not_starts_with: String

  """All values ending with the given string."""
  photo_ends_with: String

  """All values not ending with the given string."""
  photo_not_ends_with: String
  avgRating: Float

  """All values that are not equal to given value."""
  avgRating_not: Float

  """All values that are contained in given list."""
  avgRating_in: [Float!]

  """All values that are not contained in given list."""
  avgRating_not_in: [Float!]

  """All values less than the given value."""
  avgRating_lt: Float

  """All values less than or equal the given value."""
  avgRating_lte: Float

  """All values greater than the given value."""
  avgRating_gt: Float

  """All values greater than or equal the given value."""
  avgRating_gte: Float
  checked: Boolean

  """All values that are not equal to given value."""
  checked_not: Boolean
  accepted: Boolean

  """All values that are not equal to given value."""
  accepted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  brewery: BreweryWhereInput
  type: BeerTypeWhereInput
  beer: BeerWhereInput
  user: UserWhereInput
}

input BeerChangeWhereUniqueInput {
  id: ID
}

type BeerComment implements Node {
  id: ID!
  comment: String!
  beer: Beer!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BeerCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeerCommentEdge]!
  aggregate: AggregateBeerComment!
}

input BeerCommentCreateInput {
  comment: String!
  beer: BeerCreateOneWithoutBeerCommentsInput!
  user: UserCreateOneWithoutBeerCommentsInput
}

input BeerCommentCreateManyWithoutBeerInput {
  create: [BeerCommentCreateWithoutBeerInput!]
  connect: [BeerCommentWhereUniqueInput!]
}

input BeerCommentCreateManyWithoutUserInput {
  create: [BeerCommentCreateWithoutUserInput!]
  connect: [BeerCommentWhereUniqueInput!]
}

input BeerCommentCreateWithoutBeerInput {
  comment: String!
  user: UserCreateOneWithoutBeerCommentsInput
}

input BeerCommentCreateWithoutUserInput {
  comment: String!
  beer: BeerCreateOneWithoutBeerCommentsInput!
}

"""An edge in a connection."""
type BeerCommentEdge {
  """The item at the end of the edge."""
  node: BeerComment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BeerCommentOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BeerCommentPreviousValues {
  id: ID!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BeerCommentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerCommentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerCommentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerCommentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BeerCommentSubscriptionPayload {
  mutation: MutationType!
  node: BeerComment
  updatedFields: [String!]
  previousValues: BeerCommentPreviousValues
}

input BeerCommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerCommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerCommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerCommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BeerCommentWhereInput
}

input BeerCommentUpdateInput {
  comment: String
  beer: BeerUpdateOneRequiredWithoutBeerCommentsInput
  user: UserUpdateOneWithoutBeerCommentsInput
}

input BeerCommentUpdateManyDataInput {
  comment: String
}

input BeerCommentUpdateManyMutationInput {
  comment: String
}

input BeerCommentUpdateManyWithoutBeerInput {
  create: [BeerCommentCreateWithoutBeerInput!]
  connect: [BeerCommentWhereUniqueInput!]
  set: [BeerCommentWhereUniqueInput!]
  disconnect: [BeerCommentWhereUniqueInput!]
  delete: [BeerCommentWhereUniqueInput!]
  update: [BeerCommentUpdateWithWhereUniqueWithoutBeerInput!]
  updateMany: [BeerCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerCommentScalarWhereInput!]
  upsert: [BeerCommentUpsertWithWhereUniqueWithoutBeerInput!]
}

input BeerCommentUpdateManyWithoutUserInput {
  create: [BeerCommentCreateWithoutUserInput!]
  connect: [BeerCommentWhereUniqueInput!]
  set: [BeerCommentWhereUniqueInput!]
  disconnect: [BeerCommentWhereUniqueInput!]
  delete: [BeerCommentWhereUniqueInput!]
  update: [BeerCommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BeerCommentUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerCommentScalarWhereInput!]
  upsert: [BeerCommentUpsertWithWhereUniqueWithoutUserInput!]
}

input BeerCommentUpdateManyWithWhereNestedInput {
  where: BeerCommentScalarWhereInput!
  data: BeerCommentUpdateManyDataInput!
}

input BeerCommentUpdateWithoutBeerDataInput {
  comment: String
  user: UserUpdateOneWithoutBeerCommentsInput
}

input BeerCommentUpdateWithoutUserDataInput {
  comment: String
  beer: BeerUpdateOneRequiredWithoutBeerCommentsInput
}

input BeerCommentUpdateWithWhereUniqueWithoutBeerInput {
  where: BeerCommentWhereUniqueInput!
  data: BeerCommentUpdateWithoutBeerDataInput!
}

input BeerCommentUpdateWithWhereUniqueWithoutUserInput {
  where: BeerCommentWhereUniqueInput!
  data: BeerCommentUpdateWithoutUserDataInput!
}

input BeerCommentUpsertWithWhereUniqueWithoutBeerInput {
  where: BeerCommentWhereUniqueInput!
  update: BeerCommentUpdateWithoutBeerDataInput!
  create: BeerCommentCreateWithoutBeerInput!
}

input BeerCommentUpsertWithWhereUniqueWithoutUserInput {
  where: BeerCommentWhereUniqueInput!
  update: BeerCommentUpdateWithoutUserDataInput!
  create: BeerCommentCreateWithoutUserInput!
}

input BeerCommentWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerCommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerCommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerCommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  beer: BeerWhereInput
  user: UserWhereInput
}

input BeerCommentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type BeerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeerEdge]!
  aggregate: AggregateBeer!
}

input BeerCreateInput {
  name: String!
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryCreateOneWithoutBeersInput
  type: BeerTypeCreateOneWithoutBeersInput
  beerRating: BeerRatingCreateManyWithoutBeerInput
  beerComments: BeerCommentCreateManyWithoutBeerInput
  beerChanges: BeerChangeCreateManyWithoutBeerInput
  includedIn: BeerListItemCreateManyWithoutBeerInput
  createdBy: UserCreateOneWithoutCreatedBeersInput
  likedBy: UserCreateManyWithoutLikedBeersInput
}

input BeerCreateManyWithoutBreweryInput {
  create: [BeerCreateWithoutBreweryInput!]
  connect: [BeerWhereUniqueInput!]
}

input BeerCreateManyWithoutCreatedByInput {
  create: [BeerCreateWithoutCreatedByInput!]
  connect: [BeerWhereUniqueInput!]
}

input BeerCreateManyWithoutLikedByInput {
  create: [BeerCreateWithoutLikedByInput!]
  connect: [BeerWhereUniqueInput!]
}

input BeerCreateManyWithoutTypeInput {
  create: [BeerCreateWithoutTypeInput!]
  connect: [BeerWhereUniqueInput!]
}

input BeerCreateOneWithoutBeerChangesInput {
  create: BeerCreateWithoutBeerChangesInput
  connect: BeerWhereUniqueInput
}

input BeerCreateOneWithoutBeerCommentsInput {
  create: BeerCreateWithoutBeerCommentsInput
  connect: BeerWhereUniqueInput
}

input BeerCreateOneWithoutBeerRatingInput {
  create: BeerCreateWithoutBeerRatingInput
  connect: BeerWhereUniqueInput
}

input BeerCreateOneWithoutIncludedInInput {
  create: BeerCreateWithoutIncludedInInput
  connect: BeerWhereUniqueInput
}

input BeerCreateWithoutBeerChangesInput {
  name: String!
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryCreateOneWithoutBeersInput
  type: BeerTypeCreateOneWithoutBeersInput
  beerRating: BeerRatingCreateManyWithoutBeerInput
  beerComments: BeerCommentCreateManyWithoutBeerInput
  includedIn: BeerListItemCreateManyWithoutBeerInput
  createdBy: UserCreateOneWithoutCreatedBeersInput
  likedBy: UserCreateManyWithoutLikedBeersInput
}

input BeerCreateWithoutBeerCommentsInput {
  name: String!
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryCreateOneWithoutBeersInput
  type: BeerTypeCreateOneWithoutBeersInput
  beerRating: BeerRatingCreateManyWithoutBeerInput
  beerChanges: BeerChangeCreateManyWithoutBeerInput
  includedIn: BeerListItemCreateManyWithoutBeerInput
  createdBy: UserCreateOneWithoutCreatedBeersInput
  likedBy: UserCreateManyWithoutLikedBeersInput
}

input BeerCreateWithoutBeerRatingInput {
  name: String!
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryCreateOneWithoutBeersInput
  type: BeerTypeCreateOneWithoutBeersInput
  beerComments: BeerCommentCreateManyWithoutBeerInput
  beerChanges: BeerChangeCreateManyWithoutBeerInput
  includedIn: BeerListItemCreateManyWithoutBeerInput
  createdBy: UserCreateOneWithoutCreatedBeersInput
  likedBy: UserCreateManyWithoutLikedBeersInput
}

input BeerCreateWithoutBreweryInput {
  name: String!
  strong: String
  photo: String
  avgRating: Float
  type: BeerTypeCreateOneWithoutBeersInput
  beerRating: BeerRatingCreateManyWithoutBeerInput
  beerComments: BeerCommentCreateManyWithoutBeerInput
  beerChanges: BeerChangeCreateManyWithoutBeerInput
  includedIn: BeerListItemCreateManyWithoutBeerInput
  createdBy: UserCreateOneWithoutCreatedBeersInput
  likedBy: UserCreateManyWithoutLikedBeersInput
}

input BeerCreateWithoutCreatedByInput {
  name: String!
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryCreateOneWithoutBeersInput
  type: BeerTypeCreateOneWithoutBeersInput
  beerRating: BeerRatingCreateManyWithoutBeerInput
  beerComments: BeerCommentCreateManyWithoutBeerInput
  beerChanges: BeerChangeCreateManyWithoutBeerInput
  includedIn: BeerListItemCreateManyWithoutBeerInput
  likedBy: UserCreateManyWithoutLikedBeersInput
}

input BeerCreateWithoutIncludedInInput {
  name: String!
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryCreateOneWithoutBeersInput
  type: BeerTypeCreateOneWithoutBeersInput
  beerRating: BeerRatingCreateManyWithoutBeerInput
  beerComments: BeerCommentCreateManyWithoutBeerInput
  beerChanges: BeerChangeCreateManyWithoutBeerInput
  createdBy: UserCreateOneWithoutCreatedBeersInput
  likedBy: UserCreateManyWithoutLikedBeersInput
}

input BeerCreateWithoutLikedByInput {
  name: String!
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryCreateOneWithoutBeersInput
  type: BeerTypeCreateOneWithoutBeersInput
  beerRating: BeerRatingCreateManyWithoutBeerInput
  beerComments: BeerCommentCreateManyWithoutBeerInput
  beerChanges: BeerChangeCreateManyWithoutBeerInput
  includedIn: BeerListItemCreateManyWithoutBeerInput
  createdBy: UserCreateOneWithoutCreatedBeersInput
}

input BeerCreateWithoutTypeInput {
  name: String!
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryCreateOneWithoutBeersInput
  beerRating: BeerRatingCreateManyWithoutBeerInput
  beerComments: BeerCommentCreateManyWithoutBeerInput
  beerChanges: BeerChangeCreateManyWithoutBeerInput
  includedIn: BeerListItemCreateManyWithoutBeerInput
  createdBy: UserCreateOneWithoutCreatedBeersInput
  likedBy: UserCreateManyWithoutLikedBeersInput
}

"""An edge in a connection."""
type BeerEdge {
  """The item at the end of the edge."""
  node: Beer!

  """A cursor for use in pagination."""
  cursor: String!
}

type BeerList implements Node {
  id: ID!
  bar: Bar
  items(where: BeerListItemWhereInput, orderBy: BeerListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerListItem!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BeerListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeerListEdge]!
  aggregate: AggregateBeerList!
}

input BeerListCreateInput {
  bar: BarCreateOneWithoutBeerListInput
  items: BeerListItemCreateManyWithoutBeerListInput
}

input BeerListCreateOneInput {
  create: BeerListCreateInput
  connect: BeerListWhereUniqueInput
}

input BeerListCreateOneWithoutBarInput {
  create: BeerListCreateWithoutBarInput
  connect: BeerListWhereUniqueInput
}

input BeerListCreateOneWithoutItemsInput {
  create: BeerListCreateWithoutItemsInput
  connect: BeerListWhereUniqueInput
}

input BeerListCreateWithoutBarInput {
  items: BeerListItemCreateManyWithoutBeerListInput
}

input BeerListCreateWithoutItemsInput {
  bar: BarCreateOneWithoutBeerListInput
}

"""An edge in a connection."""
type BeerListEdge {
  """The item at the end of the edge."""
  node: BeerList!

  """A cursor for use in pagination."""
  cursor: String!
}

type BeerListItem implements Node {
  id: ID!
  price: Float!
  beer: Beer!
  beerList: BeerList!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BeerListItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeerListItemEdge]!
  aggregate: AggregateBeerListItem!
}

input BeerListItemCreateInput {
  price: Float!
  beer: BeerCreateOneWithoutIncludedInInput!
  beerList: BeerListCreateOneWithoutItemsInput!
}

input BeerListItemCreateManyWithoutBeerInput {
  create: [BeerListItemCreateWithoutBeerInput!]
  connect: [BeerListItemWhereUniqueInput!]
}

input BeerListItemCreateManyWithoutBeerListInput {
  create: [BeerListItemCreateWithoutBeerListInput!]
  connect: [BeerListItemWhereUniqueInput!]
}

input BeerListItemCreateWithoutBeerInput {
  price: Float!
  beerList: BeerListCreateOneWithoutItemsInput!
}

input BeerListItemCreateWithoutBeerListInput {
  price: Float!
  beer: BeerCreateOneWithoutIncludedInInput!
}

"""An edge in a connection."""
type BeerListItemEdge {
  """The item at the end of the edge."""
  node: BeerListItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BeerListItemOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BeerListItemPreviousValues {
  id: ID!
  price: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BeerListItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerListItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerListItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerListItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BeerListItemSubscriptionPayload {
  mutation: MutationType!
  node: BeerListItem
  updatedFields: [String!]
  previousValues: BeerListItemPreviousValues
}

input BeerListItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerListItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerListItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerListItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BeerListItemWhereInput
}

input BeerListItemUpdateInput {
  price: Float
  beer: BeerUpdateOneRequiredWithoutIncludedInInput
  beerList: BeerListUpdateOneRequiredWithoutItemsInput
}

input BeerListItemUpdateManyDataInput {
  price: Float
}

input BeerListItemUpdateManyMutationInput {
  price: Float
}

input BeerListItemUpdateManyWithoutBeerInput {
  create: [BeerListItemCreateWithoutBeerInput!]
  connect: [BeerListItemWhereUniqueInput!]
  set: [BeerListItemWhereUniqueInput!]
  disconnect: [BeerListItemWhereUniqueInput!]
  delete: [BeerListItemWhereUniqueInput!]
  update: [BeerListItemUpdateWithWhereUniqueWithoutBeerInput!]
  updateMany: [BeerListItemUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerListItemScalarWhereInput!]
  upsert: [BeerListItemUpsertWithWhereUniqueWithoutBeerInput!]
}

input BeerListItemUpdateManyWithoutBeerListInput {
  create: [BeerListItemCreateWithoutBeerListInput!]
  connect: [BeerListItemWhereUniqueInput!]
  set: [BeerListItemWhereUniqueInput!]
  disconnect: [BeerListItemWhereUniqueInput!]
  delete: [BeerListItemWhereUniqueInput!]
  update: [BeerListItemUpdateWithWhereUniqueWithoutBeerListInput!]
  updateMany: [BeerListItemUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerListItemScalarWhereInput!]
  upsert: [BeerListItemUpsertWithWhereUniqueWithoutBeerListInput!]
}

input BeerListItemUpdateManyWithWhereNestedInput {
  where: BeerListItemScalarWhereInput!
  data: BeerListItemUpdateManyDataInput!
}

input BeerListItemUpdateWithoutBeerDataInput {
  price: Float
  beerList: BeerListUpdateOneRequiredWithoutItemsInput
}

input BeerListItemUpdateWithoutBeerListDataInput {
  price: Float
  beer: BeerUpdateOneRequiredWithoutIncludedInInput
}

input BeerListItemUpdateWithWhereUniqueWithoutBeerInput {
  where: BeerListItemWhereUniqueInput!
  data: BeerListItemUpdateWithoutBeerDataInput!
}

input BeerListItemUpdateWithWhereUniqueWithoutBeerListInput {
  where: BeerListItemWhereUniqueInput!
  data: BeerListItemUpdateWithoutBeerListDataInput!
}

input BeerListItemUpsertWithWhereUniqueWithoutBeerInput {
  where: BeerListItemWhereUniqueInput!
  update: BeerListItemUpdateWithoutBeerDataInput!
  create: BeerListItemCreateWithoutBeerInput!
}

input BeerListItemUpsertWithWhereUniqueWithoutBeerListInput {
  where: BeerListItemWhereUniqueInput!
  update: BeerListItemUpdateWithoutBeerListDataInput!
  create: BeerListItemCreateWithoutBeerListInput!
}

input BeerListItemWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerListItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerListItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerListItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  beer: BeerWhereInput
  beerList: BeerListWhereInput
}

input BeerListItemWhereUniqueInput {
  id: ID
}

enum BeerListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BeerListPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BeerListSubscriptionPayload {
  mutation: MutationType!
  node: BeerList
  updatedFields: [String!]
  previousValues: BeerListPreviousValues
}

input BeerListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerListSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BeerListWhereInput
}

input BeerListUpdateDataInput {
  bar: BarUpdateOneWithoutBeerListInput
  items: BeerListItemUpdateManyWithoutBeerListInput
}

input BeerListUpdateInput {
  bar: BarUpdateOneWithoutBeerListInput
  items: BeerListItemUpdateManyWithoutBeerListInput
}

input BeerListUpdateOneRequiredInput {
  create: BeerListCreateInput
  connect: BeerListWhereUniqueInput
  update: BeerListUpdateDataInput
  upsert: BeerListUpsertNestedInput
}

input BeerListUpdateOneRequiredWithoutBarInput {
  create: BeerListCreateWithoutBarInput
  connect: BeerListWhereUniqueInput
  update: BeerListUpdateWithoutBarDataInput
  upsert: BeerListUpsertWithoutBarInput
}

input BeerListUpdateOneRequiredWithoutItemsInput {
  create: BeerListCreateWithoutItemsInput
  connect: BeerListWhereUniqueInput
  update: BeerListUpdateWithoutItemsDataInput
  upsert: BeerListUpsertWithoutItemsInput
}

input BeerListUpdateWithoutBarDataInput {
  items: BeerListItemUpdateManyWithoutBeerListInput
}

input BeerListUpdateWithoutItemsDataInput {
  bar: BarUpdateOneWithoutBeerListInput
}

input BeerListUpsertNestedInput {
  update: BeerListUpdateDataInput!
  create: BeerListCreateInput!
}

input BeerListUpsertWithoutBarInput {
  update: BeerListUpdateWithoutBarDataInput!
  create: BeerListCreateWithoutBarInput!
}

input BeerListUpsertWithoutItemsInput {
  update: BeerListUpdateWithoutItemsDataInput!
  create: BeerListCreateWithoutItemsInput!
}

input BeerListWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerListWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  bar: BarWhereInput
  items_every: BeerListItemWhereInput
  items_some: BeerListItemWhereInput
  items_none: BeerListItemWhereInput
}

input BeerListWhereUniqueInput {
  id: ID
}

enum BeerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  strong_ASC
  strong_DESC
  photo_ASC
  photo_DESC
  avgRating_ASC
  avgRating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BeerPreviousValues {
  id: ID!
  name: String!
  strong: String
  photo: String
  avgRating: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BeerRating implements Node {
  id: ID!
  rating: Int!
  user: User
  beer: Beer!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BeerRatingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeerRatingEdge]!
  aggregate: AggregateBeerRating!
}

input BeerRatingCreateInput {
  rating: Int!
  user: UserCreateOneWithoutBeerRatingsInput
  beer: BeerCreateOneWithoutBeerRatingInput!
}

input BeerRatingCreateManyWithoutBeerInput {
  create: [BeerRatingCreateWithoutBeerInput!]
  connect: [BeerRatingWhereUniqueInput!]
}

input BeerRatingCreateManyWithoutUserInput {
  create: [BeerRatingCreateWithoutUserInput!]
  connect: [BeerRatingWhereUniqueInput!]
}

input BeerRatingCreateWithoutBeerInput {
  rating: Int!
  user: UserCreateOneWithoutBeerRatingsInput
}

input BeerRatingCreateWithoutUserInput {
  rating: Int!
  beer: BeerCreateOneWithoutBeerRatingInput!
}

"""An edge in a connection."""
type BeerRatingEdge {
  """The item at the end of the edge."""
  node: BeerRating!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BeerRatingOrderByInput {
  id_ASC
  id_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BeerRatingPreviousValues {
  id: ID!
  rating: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BeerRatingScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerRatingScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerRatingScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerRatingScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BeerRatingSubscriptionPayload {
  mutation: MutationType!
  node: BeerRating
  updatedFields: [String!]
  previousValues: BeerRatingPreviousValues
}

input BeerRatingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerRatingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerRatingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerRatingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BeerRatingWhereInput
}

input BeerRatingUpdateInput {
  rating: Int
  user: UserUpdateOneWithoutBeerRatingsInput
  beer: BeerUpdateOneRequiredWithoutBeerRatingInput
}

input BeerRatingUpdateManyDataInput {
  rating: Int
}

input BeerRatingUpdateManyMutationInput {
  rating: Int
}

input BeerRatingUpdateManyWithoutBeerInput {
  create: [BeerRatingCreateWithoutBeerInput!]
  connect: [BeerRatingWhereUniqueInput!]
  set: [BeerRatingWhereUniqueInput!]
  disconnect: [BeerRatingWhereUniqueInput!]
  delete: [BeerRatingWhereUniqueInput!]
  update: [BeerRatingUpdateWithWhereUniqueWithoutBeerInput!]
  updateMany: [BeerRatingUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerRatingScalarWhereInput!]
  upsert: [BeerRatingUpsertWithWhereUniqueWithoutBeerInput!]
}

input BeerRatingUpdateManyWithoutUserInput {
  create: [BeerRatingCreateWithoutUserInput!]
  connect: [BeerRatingWhereUniqueInput!]
  set: [BeerRatingWhereUniqueInput!]
  disconnect: [BeerRatingWhereUniqueInput!]
  delete: [BeerRatingWhereUniqueInput!]
  update: [BeerRatingUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BeerRatingUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerRatingScalarWhereInput!]
  upsert: [BeerRatingUpsertWithWhereUniqueWithoutUserInput!]
}

input BeerRatingUpdateManyWithWhereNestedInput {
  where: BeerRatingScalarWhereInput!
  data: BeerRatingUpdateManyDataInput!
}

input BeerRatingUpdateWithoutBeerDataInput {
  rating: Int
  user: UserUpdateOneWithoutBeerRatingsInput
}

input BeerRatingUpdateWithoutUserDataInput {
  rating: Int
  beer: BeerUpdateOneRequiredWithoutBeerRatingInput
}

input BeerRatingUpdateWithWhereUniqueWithoutBeerInput {
  where: BeerRatingWhereUniqueInput!
  data: BeerRatingUpdateWithoutBeerDataInput!
}

input BeerRatingUpdateWithWhereUniqueWithoutUserInput {
  where: BeerRatingWhereUniqueInput!
  data: BeerRatingUpdateWithoutUserDataInput!
}

input BeerRatingUpsertWithWhereUniqueWithoutBeerInput {
  where: BeerRatingWhereUniqueInput!
  update: BeerRatingUpdateWithoutBeerDataInput!
  create: BeerRatingCreateWithoutBeerInput!
}

input BeerRatingUpsertWithWhereUniqueWithoutUserInput {
  where: BeerRatingWhereUniqueInput!
  update: BeerRatingUpdateWithoutUserDataInput!
  create: BeerRatingCreateWithoutUserInput!
}

input BeerRatingWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerRatingWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerRatingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerRatingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  beer: BeerWhereInput
}

input BeerRatingWhereUniqueInput {
  id: ID
}

input BeerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  strong: String

  """All values that are not equal to given value."""
  strong_not: String

  """All values that are contained in given list."""
  strong_in: [String!]

  """All values that are not contained in given list."""
  strong_not_in: [String!]

  """All values less than the given value."""
  strong_lt: String

  """All values less than or equal the given value."""
  strong_lte: String

  """All values greater than the given value."""
  strong_gt: String

  """All values greater than or equal the given value."""
  strong_gte: String

  """All values containing the given string."""
  strong_contains: String

  """All values not containing the given string."""
  strong_not_contains: String

  """All values starting with the given string."""
  strong_starts_with: String

  """All values not starting with the given string."""
  strong_not_starts_with: String

  """All values ending with the given string."""
  strong_ends_with: String

  """All values not ending with the given string."""
  strong_not_ends_with: String
  photo: String

  """All values that are not equal to given value."""
  photo_not: String

  """All values that are contained in given list."""
  photo_in: [String!]

  """All values that are not contained in given list."""
  photo_not_in: [String!]

  """All values less than the given value."""
  photo_lt: String

  """All values less than or equal the given value."""
  photo_lte: String

  """All values greater than the given value."""
  photo_gt: String

  """All values greater than or equal the given value."""
  photo_gte: String

  """All values containing the given string."""
  photo_contains: String

  """All values not containing the given string."""
  photo_not_contains: String

  """All values starting with the given string."""
  photo_starts_with: String

  """All values not starting with the given string."""
  photo_not_starts_with: String

  """All values ending with the given string."""
  photo_ends_with: String

  """All values not ending with the given string."""
  photo_not_ends_with: String
  avgRating: Float

  """All values that are not equal to given value."""
  avgRating_not: Float

  """All values that are contained in given list."""
  avgRating_in: [Float!]

  """All values that are not contained in given list."""
  avgRating_not_in: [Float!]

  """All values less than the given value."""
  avgRating_lt: Float

  """All values less than or equal the given value."""
  avgRating_lte: Float

  """All values greater than the given value."""
  avgRating_gt: Float

  """All values greater than or equal the given value."""
  avgRating_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type BeerSubscriptionPayload {
  mutation: MutationType!
  node: Beer
  updatedFields: [String!]
  previousValues: BeerPreviousValues
}

input BeerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BeerWhereInput
}

type BeerType implements Node {
  id: ID!
  name: String!
  description: String
  beers(where: BeerWhereInput, orderBy: BeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Beer!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BeerTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeerTypeEdge]!
  aggregate: AggregateBeerType!
}

input BeerTypeCreateInput {
  name: String!
  description: String
  beers: BeerCreateManyWithoutTypeInput
}

input BeerTypeCreateOneInput {
  create: BeerTypeCreateInput
  connect: BeerTypeWhereUniqueInput
}

input BeerTypeCreateOneWithoutBeersInput {
  create: BeerTypeCreateWithoutBeersInput
  connect: BeerTypeWhereUniqueInput
}

input BeerTypeCreateWithoutBeersInput {
  name: String!
  description: String
}

"""An edge in a connection."""
type BeerTypeEdge {
  """The item at the end of the edge."""
  node: BeerType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BeerTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BeerTypePreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BeerTypeSubscriptionPayload {
  mutation: MutationType!
  node: BeerType
  updatedFields: [String!]
  previousValues: BeerTypePreviousValues
}

input BeerTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BeerTypeWhereInput
}

input BeerTypeUpdateDataInput {
  name: String
  description: String
  beers: BeerUpdateManyWithoutTypeInput
}

input BeerTypeUpdateInput {
  name: String
  description: String
  beers: BeerUpdateManyWithoutTypeInput
}

input BeerTypeUpdateManyMutationInput {
  name: String
  description: String
}

input BeerTypeUpdateOneInput {
  create: BeerTypeCreateInput
  connect: BeerTypeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BeerTypeUpdateDataInput
  upsert: BeerTypeUpsertNestedInput
}

input BeerTypeUpdateOneWithoutBeersInput {
  create: BeerTypeCreateWithoutBeersInput
  connect: BeerTypeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BeerTypeUpdateWithoutBeersDataInput
  upsert: BeerTypeUpsertWithoutBeersInput
}

input BeerTypeUpdateWithoutBeersDataInput {
  name: String
  description: String
}

input BeerTypeUpsertNestedInput {
  update: BeerTypeUpdateDataInput!
  create: BeerTypeCreateInput!
}

input BeerTypeUpsertWithoutBeersInput {
  update: BeerTypeUpdateWithoutBeersDataInput!
  create: BeerTypeCreateWithoutBeersInput!
}

input BeerTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  beers_every: BeerWhereInput
  beers_some: BeerWhereInput
  beers_none: BeerWhereInput
}

input BeerTypeWhereUniqueInput {
  id: ID
}

input BeerUpdateInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryUpdateOneWithoutBeersInput
  type: BeerTypeUpdateOneWithoutBeersInput
  beerRating: BeerRatingUpdateManyWithoutBeerInput
  beerComments: BeerCommentUpdateManyWithoutBeerInput
  beerChanges: BeerChangeUpdateManyWithoutBeerInput
  includedIn: BeerListItemUpdateManyWithoutBeerInput
  createdBy: UserUpdateOneWithoutCreatedBeersInput
  likedBy: UserUpdateManyWithoutLikedBeersInput
}

input BeerUpdateManyDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
}

input BeerUpdateManyMutationInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
}

input BeerUpdateManyWithoutBreweryInput {
  create: [BeerCreateWithoutBreweryInput!]
  connect: [BeerWhereUniqueInput!]
  set: [BeerWhereUniqueInput!]
  disconnect: [BeerWhereUniqueInput!]
  delete: [BeerWhereUniqueInput!]
  update: [BeerUpdateWithWhereUniqueWithoutBreweryInput!]
  updateMany: [BeerUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerScalarWhereInput!]
  upsert: [BeerUpsertWithWhereUniqueWithoutBreweryInput!]
}

input BeerUpdateManyWithoutCreatedByInput {
  create: [BeerCreateWithoutCreatedByInput!]
  connect: [BeerWhereUniqueInput!]
  set: [BeerWhereUniqueInput!]
  disconnect: [BeerWhereUniqueInput!]
  delete: [BeerWhereUniqueInput!]
  update: [BeerUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [BeerUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerScalarWhereInput!]
  upsert: [BeerUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input BeerUpdateManyWithoutLikedByInput {
  create: [BeerCreateWithoutLikedByInput!]
  connect: [BeerWhereUniqueInput!]
  set: [BeerWhereUniqueInput!]
  disconnect: [BeerWhereUniqueInput!]
  delete: [BeerWhereUniqueInput!]
  update: [BeerUpdateWithWhereUniqueWithoutLikedByInput!]
  updateMany: [BeerUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerScalarWhereInput!]
  upsert: [BeerUpsertWithWhereUniqueWithoutLikedByInput!]
}

input BeerUpdateManyWithoutTypeInput {
  create: [BeerCreateWithoutTypeInput!]
  connect: [BeerWhereUniqueInput!]
  set: [BeerWhereUniqueInput!]
  disconnect: [BeerWhereUniqueInput!]
  delete: [BeerWhereUniqueInput!]
  update: [BeerUpdateWithWhereUniqueWithoutTypeInput!]
  updateMany: [BeerUpdateManyWithWhereNestedInput!]
  deleteMany: [BeerScalarWhereInput!]
  upsert: [BeerUpsertWithWhereUniqueWithoutTypeInput!]
}

input BeerUpdateManyWithWhereNestedInput {
  where: BeerScalarWhereInput!
  data: BeerUpdateManyDataInput!
}

input BeerUpdateOneRequiredWithoutBeerChangesInput {
  create: BeerCreateWithoutBeerChangesInput
  connect: BeerWhereUniqueInput
  update: BeerUpdateWithoutBeerChangesDataInput
  upsert: BeerUpsertWithoutBeerChangesInput
}

input BeerUpdateOneRequiredWithoutBeerCommentsInput {
  create: BeerCreateWithoutBeerCommentsInput
  connect: BeerWhereUniqueInput
  update: BeerUpdateWithoutBeerCommentsDataInput
  upsert: BeerUpsertWithoutBeerCommentsInput
}

input BeerUpdateOneRequiredWithoutBeerRatingInput {
  create: BeerCreateWithoutBeerRatingInput
  connect: BeerWhereUniqueInput
  update: BeerUpdateWithoutBeerRatingDataInput
  upsert: BeerUpsertWithoutBeerRatingInput
}

input BeerUpdateOneRequiredWithoutIncludedInInput {
  create: BeerCreateWithoutIncludedInInput
  connect: BeerWhereUniqueInput
  update: BeerUpdateWithoutIncludedInDataInput
  upsert: BeerUpsertWithoutIncludedInInput
}

input BeerUpdateWithoutBeerChangesDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryUpdateOneWithoutBeersInput
  type: BeerTypeUpdateOneWithoutBeersInput
  beerRating: BeerRatingUpdateManyWithoutBeerInput
  beerComments: BeerCommentUpdateManyWithoutBeerInput
  includedIn: BeerListItemUpdateManyWithoutBeerInput
  createdBy: UserUpdateOneWithoutCreatedBeersInput
  likedBy: UserUpdateManyWithoutLikedBeersInput
}

input BeerUpdateWithoutBeerCommentsDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryUpdateOneWithoutBeersInput
  type: BeerTypeUpdateOneWithoutBeersInput
  beerRating: BeerRatingUpdateManyWithoutBeerInput
  beerChanges: BeerChangeUpdateManyWithoutBeerInput
  includedIn: BeerListItemUpdateManyWithoutBeerInput
  createdBy: UserUpdateOneWithoutCreatedBeersInput
  likedBy: UserUpdateManyWithoutLikedBeersInput
}

input BeerUpdateWithoutBeerRatingDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryUpdateOneWithoutBeersInput
  type: BeerTypeUpdateOneWithoutBeersInput
  beerComments: BeerCommentUpdateManyWithoutBeerInput
  beerChanges: BeerChangeUpdateManyWithoutBeerInput
  includedIn: BeerListItemUpdateManyWithoutBeerInput
  createdBy: UserUpdateOneWithoutCreatedBeersInput
  likedBy: UserUpdateManyWithoutLikedBeersInput
}

input BeerUpdateWithoutBreweryDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  type: BeerTypeUpdateOneWithoutBeersInput
  beerRating: BeerRatingUpdateManyWithoutBeerInput
  beerComments: BeerCommentUpdateManyWithoutBeerInput
  beerChanges: BeerChangeUpdateManyWithoutBeerInput
  includedIn: BeerListItemUpdateManyWithoutBeerInput
  createdBy: UserUpdateOneWithoutCreatedBeersInput
  likedBy: UserUpdateManyWithoutLikedBeersInput
}

input BeerUpdateWithoutCreatedByDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryUpdateOneWithoutBeersInput
  type: BeerTypeUpdateOneWithoutBeersInput
  beerRating: BeerRatingUpdateManyWithoutBeerInput
  beerComments: BeerCommentUpdateManyWithoutBeerInput
  beerChanges: BeerChangeUpdateManyWithoutBeerInput
  includedIn: BeerListItemUpdateManyWithoutBeerInput
  likedBy: UserUpdateManyWithoutLikedBeersInput
}

input BeerUpdateWithoutIncludedInDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryUpdateOneWithoutBeersInput
  type: BeerTypeUpdateOneWithoutBeersInput
  beerRating: BeerRatingUpdateManyWithoutBeerInput
  beerComments: BeerCommentUpdateManyWithoutBeerInput
  beerChanges: BeerChangeUpdateManyWithoutBeerInput
  createdBy: UserUpdateOneWithoutCreatedBeersInput
  likedBy: UserUpdateManyWithoutLikedBeersInput
}

input BeerUpdateWithoutLikedByDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryUpdateOneWithoutBeersInput
  type: BeerTypeUpdateOneWithoutBeersInput
  beerRating: BeerRatingUpdateManyWithoutBeerInput
  beerComments: BeerCommentUpdateManyWithoutBeerInput
  beerChanges: BeerChangeUpdateManyWithoutBeerInput
  includedIn: BeerListItemUpdateManyWithoutBeerInput
  createdBy: UserUpdateOneWithoutCreatedBeersInput
}

input BeerUpdateWithoutTypeDataInput {
  name: String
  strong: String
  photo: String
  avgRating: Float
  brewery: BreweryUpdateOneWithoutBeersInput
  beerRating: BeerRatingUpdateManyWithoutBeerInput
  beerComments: BeerCommentUpdateManyWithoutBeerInput
  beerChanges: BeerChangeUpdateManyWithoutBeerInput
  includedIn: BeerListItemUpdateManyWithoutBeerInput
  createdBy: UserUpdateOneWithoutCreatedBeersInput
  likedBy: UserUpdateManyWithoutLikedBeersInput
}

input BeerUpdateWithWhereUniqueWithoutBreweryInput {
  where: BeerWhereUniqueInput!
  data: BeerUpdateWithoutBreweryDataInput!
}

input BeerUpdateWithWhereUniqueWithoutCreatedByInput {
  where: BeerWhereUniqueInput!
  data: BeerUpdateWithoutCreatedByDataInput!
}

input BeerUpdateWithWhereUniqueWithoutLikedByInput {
  where: BeerWhereUniqueInput!
  data: BeerUpdateWithoutLikedByDataInput!
}

input BeerUpdateWithWhereUniqueWithoutTypeInput {
  where: BeerWhereUniqueInput!
  data: BeerUpdateWithoutTypeDataInput!
}

input BeerUpsertWithoutBeerChangesInput {
  update: BeerUpdateWithoutBeerChangesDataInput!
  create: BeerCreateWithoutBeerChangesInput!
}

input BeerUpsertWithoutBeerCommentsInput {
  update: BeerUpdateWithoutBeerCommentsDataInput!
  create: BeerCreateWithoutBeerCommentsInput!
}

input BeerUpsertWithoutBeerRatingInput {
  update: BeerUpdateWithoutBeerRatingDataInput!
  create: BeerCreateWithoutBeerRatingInput!
}

input BeerUpsertWithoutIncludedInInput {
  update: BeerUpdateWithoutIncludedInDataInput!
  create: BeerCreateWithoutIncludedInInput!
}

input BeerUpsertWithWhereUniqueWithoutBreweryInput {
  where: BeerWhereUniqueInput!
  update: BeerUpdateWithoutBreweryDataInput!
  create: BeerCreateWithoutBreweryInput!
}

input BeerUpsertWithWhereUniqueWithoutCreatedByInput {
  where: BeerWhereUniqueInput!
  update: BeerUpdateWithoutCreatedByDataInput!
  create: BeerCreateWithoutCreatedByInput!
}

input BeerUpsertWithWhereUniqueWithoutLikedByInput {
  where: BeerWhereUniqueInput!
  update: BeerUpdateWithoutLikedByDataInput!
  create: BeerCreateWithoutLikedByInput!
}

input BeerUpsertWithWhereUniqueWithoutTypeInput {
  where: BeerWhereUniqueInput!
  update: BeerUpdateWithoutTypeDataInput!
  create: BeerCreateWithoutTypeInput!
}

input BeerWhereInput {
  """Logical AND on all given filters."""
  AND: [BeerWhereInput!]

  """Logical OR on all given filters."""
  OR: [BeerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BeerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  strong: String

  """All values that are not equal to given value."""
  strong_not: String

  """All values that are contained in given list."""
  strong_in: [String!]

  """All values that are not contained in given list."""
  strong_not_in: [String!]

  """All values less than the given value."""
  strong_lt: String

  """All values less than or equal the given value."""
  strong_lte: String

  """All values greater than the given value."""
  strong_gt: String

  """All values greater than or equal the given value."""
  strong_gte: String

  """All values containing the given string."""
  strong_contains: String

  """All values not containing the given string."""
  strong_not_contains: String

  """All values starting with the given string."""
  strong_starts_with: String

  """All values not starting with the given string."""
  strong_not_starts_with: String

  """All values ending with the given string."""
  strong_ends_with: String

  """All values not ending with the given string."""
  strong_not_ends_with: String
  photo: String

  """All values that are not equal to given value."""
  photo_not: String

  """All values that are contained in given list."""
  photo_in: [String!]

  """All values that are not contained in given list."""
  photo_not_in: [String!]

  """All values less than the given value."""
  photo_lt: String

  """All values less than or equal the given value."""
  photo_lte: String

  """All values greater than the given value."""
  photo_gt: String

  """All values greater than or equal the given value."""
  photo_gte: String

  """All values containing the given string."""
  photo_contains: String

  """All values not containing the given string."""
  photo_not_contains: String

  """All values starting with the given string."""
  photo_starts_with: String

  """All values not starting with the given string."""
  photo_not_starts_with: String

  """All values ending with the given string."""
  photo_ends_with: String

  """All values not ending with the given string."""
  photo_not_ends_with: String
  avgRating: Float

  """All values that are not equal to given value."""
  avgRating_not: Float

  """All values that are contained in given list."""
  avgRating_in: [Float!]

  """All values that are not contained in given list."""
  avgRating_not_in: [Float!]

  """All values less than the given value."""
  avgRating_lt: Float

  """All values less than or equal the given value."""
  avgRating_lte: Float

  """All values greater than the given value."""
  avgRating_gt: Float

  """All values greater than or equal the given value."""
  avgRating_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  brewery: BreweryWhereInput
  type: BeerTypeWhereInput
  beerRating_every: BeerRatingWhereInput
  beerRating_some: BeerRatingWhereInput
  beerRating_none: BeerRatingWhereInput
  beerComments_every: BeerCommentWhereInput
  beerComments_some: BeerCommentWhereInput
  beerComments_none: BeerCommentWhereInput
  beerChanges_every: BeerChangeWhereInput
  beerChanges_some: BeerChangeWhereInput
  beerChanges_none: BeerChangeWhereInput
  includedIn_every: BeerListItemWhereInput
  includedIn_some: BeerListItemWhereInput
  includedIn_none: BeerListItemWhereInput
  createdBy: UserWhereInput
  likedBy_every: UserWhereInput
  likedBy_some: UserWhereInput
  likedBy_none: UserWhereInput
}

input BeerWhereUniqueInput {
  id: ID
}

type Brewery implements Node {
  id: ID!
  name: String!
  country: String!
  logo: String
  beers(where: BeerWhereInput, orderBy: BeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Beer!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BreweryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BreweryEdge]!
  aggregate: AggregateBrewery!
}

input BreweryCreateInput {
  name: String!
  country: String!
  logo: String
  beers: BeerCreateManyWithoutBreweryInput
}

input BreweryCreateOneInput {
  create: BreweryCreateInput
  connect: BreweryWhereUniqueInput
}

input BreweryCreateOneWithoutBeersInput {
  create: BreweryCreateWithoutBeersInput
  connect: BreweryWhereUniqueInput
}

input BreweryCreateWithoutBeersInput {
  name: String!
  country: String!
  logo: String
}

"""An edge in a connection."""
type BreweryEdge {
  """The item at the end of the edge."""
  node: Brewery!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BreweryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  country_ASC
  country_DESC
  logo_ASC
  logo_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BreweryPreviousValues {
  id: ID!
  name: String!
  country: String!
  logo: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BrewerySubscriptionPayload {
  mutation: MutationType!
  node: Brewery
  updatedFields: [String!]
  previousValues: BreweryPreviousValues
}

input BrewerySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BrewerySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrewerySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrewerySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BreweryWhereInput
}

input BreweryUpdateDataInput {
  name: String
  country: String
  logo: String
  beers: BeerUpdateManyWithoutBreweryInput
}

input BreweryUpdateInput {
  name: String
  country: String
  logo: String
  beers: BeerUpdateManyWithoutBreweryInput
}

input BreweryUpdateManyMutationInput {
  name: String
  country: String
  logo: String
}

input BreweryUpdateOneInput {
  create: BreweryCreateInput
  connect: BreweryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BreweryUpdateDataInput
  upsert: BreweryUpsertNestedInput
}

input BreweryUpdateOneWithoutBeersInput {
  create: BreweryCreateWithoutBeersInput
  connect: BreweryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BreweryUpdateWithoutBeersDataInput
  upsert: BreweryUpsertWithoutBeersInput
}

input BreweryUpdateWithoutBeersDataInput {
  name: String
  country: String
  logo: String
}

input BreweryUpsertNestedInput {
  update: BreweryUpdateDataInput!
  create: BreweryCreateInput!
}

input BreweryUpsertWithoutBeersInput {
  update: BreweryUpdateWithoutBeersDataInput!
  create: BreweryCreateWithoutBeersInput!
}

input BreweryWhereInput {
  """Logical AND on all given filters."""
  AND: [BreweryWhereInput!]

  """Logical OR on all given filters."""
  OR: [BreweryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BreweryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  logo: String

  """All values that are not equal to given value."""
  logo_not: String

  """All values that are contained in given list."""
  logo_in: [String!]

  """All values that are not contained in given list."""
  logo_not_in: [String!]

  """All values less than the given value."""
  logo_lt: String

  """All values less than or equal the given value."""
  logo_lte: String

  """All values greater than the given value."""
  logo_gt: String

  """All values greater than or equal the given value."""
  logo_gte: String

  """All values containing the given string."""
  logo_contains: String

  """All values not containing the given string."""
  logo_not_contains: String

  """All values starting with the given string."""
  logo_starts_with: String

  """All values not starting with the given string."""
  logo_not_starts_with: String

  """All values ending with the given string."""
  logo_ends_with: String

  """All values not ending with the given string."""
  logo_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  beers_every: BeerWhereInput
  beers_some: BeerWhereInput
  beers_none: BeerWhereInput
}

input BreweryWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBar(data: BarCreateInput!): Bar!
  createBarRating(data: BarRatingCreateInput!): BarRating!
  createBarComment(data: BarCommentCreateInput!): BarComment!
  createBarChange(data: BarChangeCreateInput!): BarChange!
  createBeer(data: BeerCreateInput!): Beer!
  createBeerRating(data: BeerRatingCreateInput!): BeerRating!
  createBeerComment(data: BeerCommentCreateInput!): BeerComment!
  createBeerChange(data: BeerChangeCreateInput!): BeerChange!
  createUser(data: UserCreateInput!): User!
  createBeerListItem(data: BeerListItemCreateInput!): BeerListItem!
  createBeerList(data: BeerListCreateInput!): BeerList!
  createBeerType(data: BeerTypeCreateInput!): BeerType!
  createBrewery(data: BreweryCreateInput!): Brewery!
  updateBar(data: BarUpdateInput!, where: BarWhereUniqueInput!): Bar
  updateBarRating(data: BarRatingUpdateInput!, where: BarRatingWhereUniqueInput!): BarRating
  updateBarComment(data: BarCommentUpdateInput!, where: BarCommentWhereUniqueInput!): BarComment
  updateBarChange(data: BarChangeUpdateInput!, where: BarChangeWhereUniqueInput!): BarChange
  updateBeer(data: BeerUpdateInput!, where: BeerWhereUniqueInput!): Beer
  updateBeerRating(data: BeerRatingUpdateInput!, where: BeerRatingWhereUniqueInput!): BeerRating
  updateBeerComment(data: BeerCommentUpdateInput!, where: BeerCommentWhereUniqueInput!): BeerComment
  updateBeerChange(data: BeerChangeUpdateInput!, where: BeerChangeWhereUniqueInput!): BeerChange
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateBeerListItem(data: BeerListItemUpdateInput!, where: BeerListItemWhereUniqueInput!): BeerListItem
  updateBeerList(data: BeerListUpdateInput!, where: BeerListWhereUniqueInput!): BeerList
  updateBeerType(data: BeerTypeUpdateInput!, where: BeerTypeWhereUniqueInput!): BeerType
  updateBrewery(data: BreweryUpdateInput!, where: BreweryWhereUniqueInput!): Brewery
  deleteBar(where: BarWhereUniqueInput!): Bar
  deleteBarRating(where: BarRatingWhereUniqueInput!): BarRating
  deleteBarComment(where: BarCommentWhereUniqueInput!): BarComment
  deleteBarChange(where: BarChangeWhereUniqueInput!): BarChange
  deleteBeer(where: BeerWhereUniqueInput!): Beer
  deleteBeerRating(where: BeerRatingWhereUniqueInput!): BeerRating
  deleteBeerComment(where: BeerCommentWhereUniqueInput!): BeerComment
  deleteBeerChange(where: BeerChangeWhereUniqueInput!): BeerChange
  deleteUser(where: UserWhereUniqueInput!): User
  deleteBeerListItem(where: BeerListItemWhereUniqueInput!): BeerListItem
  deleteBeerList(where: BeerListWhereUniqueInput!): BeerList
  deleteBeerType(where: BeerTypeWhereUniqueInput!): BeerType
  deleteBrewery(where: BreweryWhereUniqueInput!): Brewery
  upsertBar(where: BarWhereUniqueInput!, create: BarCreateInput!, update: BarUpdateInput!): Bar!
  upsertBarRating(where: BarRatingWhereUniqueInput!, create: BarRatingCreateInput!, update: BarRatingUpdateInput!): BarRating!
  upsertBarComment(where: BarCommentWhereUniqueInput!, create: BarCommentCreateInput!, update: BarCommentUpdateInput!): BarComment!
  upsertBarChange(where: BarChangeWhereUniqueInput!, create: BarChangeCreateInput!, update: BarChangeUpdateInput!): BarChange!
  upsertBeer(where: BeerWhereUniqueInput!, create: BeerCreateInput!, update: BeerUpdateInput!): Beer!
  upsertBeerRating(where: BeerRatingWhereUniqueInput!, create: BeerRatingCreateInput!, update: BeerRatingUpdateInput!): BeerRating!
  upsertBeerComment(where: BeerCommentWhereUniqueInput!, create: BeerCommentCreateInput!, update: BeerCommentUpdateInput!): BeerComment!
  upsertBeerChange(where: BeerChangeWhereUniqueInput!, create: BeerChangeCreateInput!, update: BeerChangeUpdateInput!): BeerChange!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertBeerListItem(where: BeerListItemWhereUniqueInput!, create: BeerListItemCreateInput!, update: BeerListItemUpdateInput!): BeerListItem!
  upsertBeerList(where: BeerListWhereUniqueInput!, create: BeerListCreateInput!, update: BeerListUpdateInput!): BeerList!
  upsertBeerType(where: BeerTypeWhereUniqueInput!, create: BeerTypeCreateInput!, update: BeerTypeUpdateInput!): BeerType!
  upsertBrewery(where: BreweryWhereUniqueInput!, create: BreweryCreateInput!, update: BreweryUpdateInput!): Brewery!
  updateManyBars(data: BarUpdateManyMutationInput!, where: BarWhereInput): BatchPayload!
  updateManyBarRatings(data: BarRatingUpdateManyMutationInput!, where: BarRatingWhereInput): BatchPayload!
  updateManyBarComments(data: BarCommentUpdateManyMutationInput!, where: BarCommentWhereInput): BatchPayload!
  updateManyBarChanges(data: BarChangeUpdateManyMutationInput!, where: BarChangeWhereInput): BatchPayload!
  updateManyBeers(data: BeerUpdateManyMutationInput!, where: BeerWhereInput): BatchPayload!
  updateManyBeerRatings(data: BeerRatingUpdateManyMutationInput!, where: BeerRatingWhereInput): BatchPayload!
  updateManyBeerComments(data: BeerCommentUpdateManyMutationInput!, where: BeerCommentWhereInput): BatchPayload!
  updateManyBeerChanges(data: BeerChangeUpdateManyMutationInput!, where: BeerChangeWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyBeerListItems(data: BeerListItemUpdateManyMutationInput!, where: BeerListItemWhereInput): BatchPayload!
  updateManyBeerTypes(data: BeerTypeUpdateManyMutationInput!, where: BeerTypeWhereInput): BatchPayload!
  updateManyBreweries(data: BreweryUpdateManyMutationInput!, where: BreweryWhereInput): BatchPayload!
  deleteManyBars(where: BarWhereInput): BatchPayload!
  deleteManyBarRatings(where: BarRatingWhereInput): BatchPayload!
  deleteManyBarComments(where: BarCommentWhereInput): BatchPayload!
  deleteManyBarChanges(where: BarChangeWhereInput): BatchPayload!
  deleteManyBeers(where: BeerWhereInput): BatchPayload!
  deleteManyBeerRatings(where: BeerRatingWhereInput): BatchPayload!
  deleteManyBeerComments(where: BeerCommentWhereInput): BatchPayload!
  deleteManyBeerChanges(where: BeerChangeWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyBeerListItems(where: BeerListItemWhereInput): BatchPayload!
  deleteManyBeerLists(where: BeerListWhereInput): BatchPayload!
  deleteManyBeerTypes(where: BeerTypeWhereInput): BatchPayload!
  deleteManyBreweries(where: BreweryWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  bars(where: BarWhereInput, orderBy: BarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bar]!
  barRatings(where: BarRatingWhereInput, orderBy: BarRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BarRating]!
  barComments(where: BarCommentWhereInput, orderBy: BarCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BarComment]!
  barChanges(where: BarChangeWhereInput, orderBy: BarChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BarChange]!
  beers(where: BeerWhereInput, orderBy: BeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Beer]!
  beerRatings(where: BeerRatingWhereInput, orderBy: BeerRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerRating]!
  beerComments(where: BeerCommentWhereInput, orderBy: BeerCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerComment]!
  beerChanges(where: BeerChangeWhereInput, orderBy: BeerChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerChange]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  beerListItems(where: BeerListItemWhereInput, orderBy: BeerListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerListItem]!
  beerLists(where: BeerListWhereInput, orderBy: BeerListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerList]!
  beerTypes(where: BeerTypeWhereInput, orderBy: BeerTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerType]!
  breweries(where: BreweryWhereInput, orderBy: BreweryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brewery]!
  bar(where: BarWhereUniqueInput!): Bar
  barRating(where: BarRatingWhereUniqueInput!): BarRating
  barComment(where: BarCommentWhereUniqueInput!): BarComment
  barChange(where: BarChangeWhereUniqueInput!): BarChange
  beer(where: BeerWhereUniqueInput!): Beer
  beerRating(where: BeerRatingWhereUniqueInput!): BeerRating
  beerComment(where: BeerCommentWhereUniqueInput!): BeerComment
  beerChange(where: BeerChangeWhereUniqueInput!): BeerChange
  user(where: UserWhereUniqueInput!): User
  beerListItem(where: BeerListItemWhereUniqueInput!): BeerListItem
  beerList(where: BeerListWhereUniqueInput!): BeerList
  beerType(where: BeerTypeWhereUniqueInput!): BeerType
  brewery(where: BreweryWhereUniqueInput!): Brewery
  barsConnection(where: BarWhereInput, orderBy: BarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BarConnection!
  barRatingsConnection(where: BarRatingWhereInput, orderBy: BarRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BarRatingConnection!
  barCommentsConnection(where: BarCommentWhereInput, orderBy: BarCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BarCommentConnection!
  barChangesConnection(where: BarChangeWhereInput, orderBy: BarChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BarChangeConnection!
  beersConnection(where: BeerWhereInput, orderBy: BeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BeerConnection!
  beerRatingsConnection(where: BeerRatingWhereInput, orderBy: BeerRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BeerRatingConnection!
  beerCommentsConnection(where: BeerCommentWhereInput, orderBy: BeerCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BeerCommentConnection!
  beerChangesConnection(where: BeerChangeWhereInput, orderBy: BeerChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BeerChangeConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  beerListItemsConnection(where: BeerListItemWhereInput, orderBy: BeerListItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BeerListItemConnection!
  beerListsConnection(where: BeerListWhereInput, orderBy: BeerListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BeerListConnection!
  beerTypesConnection(where: BeerTypeWhereInput, orderBy: BeerTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BeerTypeConnection!
  breweriesConnection(where: BreweryWhereInput, orderBy: BreweryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BreweryConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  USER
  ADMIN
}

enum Sex {
  MALE
  FEMALE
}

type Subscription {
  bar(where: BarSubscriptionWhereInput): BarSubscriptionPayload
  barRating(where: BarRatingSubscriptionWhereInput): BarRatingSubscriptionPayload
  barComment(where: BarCommentSubscriptionWhereInput): BarCommentSubscriptionPayload
  barChange(where: BarChangeSubscriptionWhereInput): BarChangeSubscriptionPayload
  beer(where: BeerSubscriptionWhereInput): BeerSubscriptionPayload
  beerRating(where: BeerRatingSubscriptionWhereInput): BeerRatingSubscriptionPayload
  beerComment(where: BeerCommentSubscriptionWhereInput): BeerCommentSubscriptionPayload
  beerChange(where: BeerChangeSubscriptionWhereInput): BeerChangeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  beerListItem(where: BeerListItemSubscriptionWhereInput): BeerListItemSubscriptionPayload
  beerList(where: BeerListSubscriptionWhereInput): BeerListSubscriptionPayload
  beerType(where: BeerTypeSubscriptionWhereInput): BeerTypeSubscriptionPayload
  brewery(where: BrewerySubscriptionWhereInput): BrewerySubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  role: Role!
  active: Boolean!
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments(where: BeerCommentWhereInput, orderBy: BeerCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerComment!]
  barComments(where: BarCommentWhereInput, orderBy: BarCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BarComment!]
  beerRatings(where: BeerRatingWhereInput, orderBy: BeerRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerRating!]
  barRatings(where: BarRatingWhereInput, orderBy: BarRatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BarRating!]
  beerChanges(where: BeerChangeWhereInput, orderBy: BeerChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BeerChange!]
  barChanges(where: BarChangeWhereInput, orderBy: BarChangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BarChange!]
  likedBeers(where: BeerWhereInput, orderBy: BeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Beer!]
  likedBars(where: BarWhereInput, orderBy: BarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bar!]
  createdBeers(where: BeerWhereInput, orderBy: BeerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Beer!]
  createdBars(where: BarWhereInput, orderBy: BarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bar!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  barComments: BarCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

input UserCreateManyWithoutLikedBarsInput {
  create: [UserCreateWithoutLikedBarsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutLikedBeersInput {
  create: [UserCreateWithoutLikedBeersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutBarChangesInput {
  create: UserCreateWithoutBarChangesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBarCommentsInput {
  create: UserCreateWithoutBarCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBarRatingsInput {
  create: UserCreateWithoutBarRatingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBeerChangesInput {
  create: UserCreateWithoutBeerChangesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBeerCommentsInput {
  create: UserCreateWithoutBeerCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBeerRatingsInput {
  create: UserCreateWithoutBeerRatingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedBarsInput {
  create: UserCreateWithoutCreatedBarsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedBeersInput {
  create: UserCreateWithoutCreatedBeersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBarChangesInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  barComments: BarCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

input UserCreateWithoutBarCommentsInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

input UserCreateWithoutBarRatingsInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  barComments: BarCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

input UserCreateWithoutBeerChangesInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  barComments: BarCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

input UserCreateWithoutBeerCommentsInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  barComments: BarCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

input UserCreateWithoutBeerRatingsInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  barComments: BarCommentCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

input UserCreateWithoutCreatedBarsInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  barComments: BarCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
}

input UserCreateWithoutCreatedBeersInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  barComments: BarCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

input UserCreateWithoutLikedBarsInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  barComments: BarCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBeers: BeerCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

input UserCreateWithoutLikedBeersInput {
  email: String!
  password: String!
  role: Role
  active: Boolean
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  beerComments: BeerCommentCreateManyWithoutUserInput
  barComments: BarCommentCreateManyWithoutUserInput
  beerRatings: BeerRatingCreateManyWithoutUserInput
  barRatings: BarRatingCreateManyWithoutUserInput
  beerChanges: BeerChangeCreateManyWithoutUserInput
  barChanges: BarChangeCreateManyWithoutUserInput
  likedBars: BarCreateManyWithoutLikedByInput
  createdBeers: BeerCreateManyWithoutCreatedByInput
  createdBars: BarCreateManyWithoutCreatedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  active_ASC
  active_DESC
  nickname_ASC
  nickname_DESC
  birthdate_ASC
  birthdate_DESC
  sex_ASC
  sex_DESC
  name_ASC
  name_DESC
  surname_ASC
  surname_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  role: Role!
  active: Boolean!
  nickname: String!
  birthdate: DateTime!
  sex: Sex!
  name: String
  surname: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  nickname: String

  """All values that are not equal to given value."""
  nickname_not: String

  """All values that are contained in given list."""
  nickname_in: [String!]

  """All values that are not contained in given list."""
  nickname_not_in: [String!]

  """All values less than the given value."""
  nickname_lt: String

  """All values less than or equal the given value."""
  nickname_lte: String

  """All values greater than the given value."""
  nickname_gt: String

  """All values greater than or equal the given value."""
  nickname_gte: String

  """All values containing the given string."""
  nickname_contains: String

  """All values not containing the given string."""
  nickname_not_contains: String

  """All values starting with the given string."""
  nickname_starts_with: String

  """All values not starting with the given string."""
  nickname_not_starts_with: String

  """All values ending with the given string."""
  nickname_ends_with: String

  """All values not ending with the given string."""
  nickname_not_ends_with: String
  birthdate: DateTime

  """All values that are not equal to given value."""
  birthdate_not: DateTime

  """All values that are contained in given list."""
  birthdate_in: [DateTime!]

  """All values that are not contained in given list."""
  birthdate_not_in: [DateTime!]

  """All values less than the given value."""
  birthdate_lt: DateTime

  """All values less than or equal the given value."""
  birthdate_lte: DateTime

  """All values greater than the given value."""
  birthdate_gt: DateTime

  """All values greater than or equal the given value."""
  birthdate_gte: DateTime
  sex: Sex

  """All values that are not equal to given value."""
  sex_not: Sex

  """All values that are contained in given list."""
  sex_in: [Sex!]

  """All values that are not contained in given list."""
  sex_not_in: [Sex!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  surname: String

  """All values that are not equal to given value."""
  surname_not: String

  """All values that are contained in given list."""
  surname_in: [String!]

  """All values that are not contained in given list."""
  surname_not_in: [String!]

  """All values less than the given value."""
  surname_lt: String

  """All values less than or equal the given value."""
  surname_lte: String

  """All values greater than the given value."""
  surname_gt: String

  """All values greater than or equal the given value."""
  surname_gte: String

  """All values containing the given string."""
  surname_contains: String

  """All values not containing the given string."""
  surname_not_contains: String

  """All values starting with the given string."""
  surname_starts_with: String

  """All values not starting with the given string."""
  surname_not_starts_with: String

  """All values ending with the given string."""
  surname_ends_with: String

  """All values not ending with the given string."""
  surname_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  barComments: BarCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateManyDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
}

input UserUpdateManyWithoutLikedBarsInput {
  create: [UserCreateWithoutLikedBarsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedBarsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedBarsInput!]
}

input UserUpdateManyWithoutLikedBeersInput {
  create: [UserCreateWithoutLikedBeersInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedBeersInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedBeersInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutBarChangesInput {
  create: UserCreateWithoutBarChangesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutBarChangesDataInput
  upsert: UserUpsertWithoutBarChangesInput
}

input UserUpdateOneWithoutBarCommentsInput {
  create: UserCreateWithoutBarCommentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutBarCommentsDataInput
  upsert: UserUpsertWithoutBarCommentsInput
}

input UserUpdateOneWithoutBarRatingsInput {
  create: UserCreateWithoutBarRatingsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutBarRatingsDataInput
  upsert: UserUpsertWithoutBarRatingsInput
}

input UserUpdateOneWithoutBeerChangesInput {
  create: UserCreateWithoutBeerChangesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutBeerChangesDataInput
  upsert: UserUpsertWithoutBeerChangesInput
}

input UserUpdateOneWithoutBeerCommentsInput {
  create: UserCreateWithoutBeerCommentsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutBeerCommentsDataInput
  upsert: UserUpsertWithoutBeerCommentsInput
}

input UserUpdateOneWithoutBeerRatingsInput {
  create: UserCreateWithoutBeerRatingsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutBeerRatingsDataInput
  upsert: UserUpsertWithoutBeerRatingsInput
}

input UserUpdateOneWithoutCreatedBarsInput {
  create: UserCreateWithoutCreatedBarsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCreatedBarsDataInput
  upsert: UserUpsertWithoutCreatedBarsInput
}

input UserUpdateOneWithoutCreatedBeersInput {
  create: UserCreateWithoutCreatedBeersInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCreatedBeersDataInput
  upsert: UserUpsertWithoutCreatedBeersInput
}

input UserUpdateWithoutBarChangesDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  barComments: BarCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutBarCommentsDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutBarRatingsDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  barComments: BarCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutBeerChangesDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  barComments: BarCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutBeerCommentsDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  barComments: BarCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutBeerRatingsDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  barComments: BarCommentUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutCreatedBarsDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  barComments: BarCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutCreatedBeersDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  barComments: BarCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutLikedBarsDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  barComments: BarCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBeers: BeerUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutLikedBeersDataInput {
  email: String
  password: String
  role: Role
  active: Boolean
  nickname: String
  birthdate: DateTime
  sex: Sex
  name: String
  surname: String
  beerComments: BeerCommentUpdateManyWithoutUserInput
  barComments: BarCommentUpdateManyWithoutUserInput
  beerRatings: BeerRatingUpdateManyWithoutUserInput
  barRatings: BarRatingUpdateManyWithoutUserInput
  beerChanges: BeerChangeUpdateManyWithoutUserInput
  barChanges: BarChangeUpdateManyWithoutUserInput
  likedBars: BarUpdateManyWithoutLikedByInput
  createdBeers: BeerUpdateManyWithoutCreatedByInput
  createdBars: BarUpdateManyWithoutCreatedByInput
}

input UserUpdateWithWhereUniqueWithoutLikedBarsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLikedBarsDataInput!
}

input UserUpdateWithWhereUniqueWithoutLikedBeersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLikedBeersDataInput!
}

input UserUpsertWithoutBarChangesInput {
  update: UserUpdateWithoutBarChangesDataInput!
  create: UserCreateWithoutBarChangesInput!
}

input UserUpsertWithoutBarCommentsInput {
  update: UserUpdateWithoutBarCommentsDataInput!
  create: UserCreateWithoutBarCommentsInput!
}

input UserUpsertWithoutBarRatingsInput {
  update: UserUpdateWithoutBarRatingsDataInput!
  create: UserCreateWithoutBarRatingsInput!
}

input UserUpsertWithoutBeerChangesInput {
  update: UserUpdateWithoutBeerChangesDataInput!
  create: UserCreateWithoutBeerChangesInput!
}

input UserUpsertWithoutBeerCommentsInput {
  update: UserUpdateWithoutBeerCommentsDataInput!
  create: UserCreateWithoutBeerCommentsInput!
}

input UserUpsertWithoutBeerRatingsInput {
  update: UserUpdateWithoutBeerRatingsDataInput!
  create: UserCreateWithoutBeerRatingsInput!
}

input UserUpsertWithoutCreatedBarsInput {
  update: UserUpdateWithoutCreatedBarsDataInput!
  create: UserCreateWithoutCreatedBarsInput!
}

input UserUpsertWithoutCreatedBeersInput {
  update: UserUpdateWithoutCreatedBeersDataInput!
  create: UserCreateWithoutCreatedBeersInput!
}

input UserUpsertWithWhereUniqueWithoutLikedBarsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLikedBarsDataInput!
  create: UserCreateWithoutLikedBarsInput!
}

input UserUpsertWithWhereUniqueWithoutLikedBeersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLikedBeersDataInput!
  create: UserCreateWithoutLikedBeersInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  nickname: String

  """All values that are not equal to given value."""
  nickname_not: String

  """All values that are contained in given list."""
  nickname_in: [String!]

  """All values that are not contained in given list."""
  nickname_not_in: [String!]

  """All values less than the given value."""
  nickname_lt: String

  """All values less than or equal the given value."""
  nickname_lte: String

  """All values greater than the given value."""
  nickname_gt: String

  """All values greater than or equal the given value."""
  nickname_gte: String

  """All values containing the given string."""
  nickname_contains: String

  """All values not containing the given string."""
  nickname_not_contains: String

  """All values starting with the given string."""
  nickname_starts_with: String

  """All values not starting with the given string."""
  nickname_not_starts_with: String

  """All values ending with the given string."""
  nickname_ends_with: String

  """All values not ending with the given string."""
  nickname_not_ends_with: String
  birthdate: DateTime

  """All values that are not equal to given value."""
  birthdate_not: DateTime

  """All values that are contained in given list."""
  birthdate_in: [DateTime!]

  """All values that are not contained in given list."""
  birthdate_not_in: [DateTime!]

  """All values less than the given value."""
  birthdate_lt: DateTime

  """All values less than or equal the given value."""
  birthdate_lte: DateTime

  """All values greater than the given value."""
  birthdate_gt: DateTime

  """All values greater than or equal the given value."""
  birthdate_gte: DateTime
  sex: Sex

  """All values that are not equal to given value."""
  sex_not: Sex

  """All values that are contained in given list."""
  sex_in: [Sex!]

  """All values that are not contained in given list."""
  sex_not_in: [Sex!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  surname: String

  """All values that are not equal to given value."""
  surname_not: String

  """All values that are contained in given list."""
  surname_in: [String!]

  """All values that are not contained in given list."""
  surname_not_in: [String!]

  """All values less than the given value."""
  surname_lt: String

  """All values less than or equal the given value."""
  surname_lte: String

  """All values greater than the given value."""
  surname_gt: String

  """All values greater than or equal the given value."""
  surname_gte: String

  """All values containing the given string."""
  surname_contains: String

  """All values not containing the given string."""
  surname_not_contains: String

  """All values starting with the given string."""
  surname_starts_with: String

  """All values not starting with the given string."""
  surname_not_starts_with: String

  """All values ending with the given string."""
  surname_ends_with: String

  """All values not ending with the given string."""
  surname_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  beerComments_every: BeerCommentWhereInput
  beerComments_some: BeerCommentWhereInput
  beerComments_none: BeerCommentWhereInput
  barComments_every: BarCommentWhereInput
  barComments_some: BarCommentWhereInput
  barComments_none: BarCommentWhereInput
  beerRatings_every: BeerRatingWhereInput
  beerRatings_some: BeerRatingWhereInput
  beerRatings_none: BeerRatingWhereInput
  barRatings_every: BarRatingWhereInput
  barRatings_some: BarRatingWhereInput
  barRatings_none: BarRatingWhereInput
  beerChanges_every: BeerChangeWhereInput
  beerChanges_some: BeerChangeWhereInput
  beerChanges_none: BeerChangeWhereInput
  barChanges_every: BarChangeWhereInput
  barChanges_some: BarChangeWhereInput
  barChanges_none: BarChangeWhereInput
  likedBeers_every: BeerWhereInput
  likedBeers_some: BeerWhereInput
  likedBeers_none: BeerWhereInput
  likedBars_every: BarWhereInput
  likedBars_some: BarWhereInput
  likedBars_none: BarWhereInput
  createdBeers_every: BeerWhereInput
  createdBeers_some: BeerWhereInput
  createdBeers_none: BeerWhereInput
  createdBars_every: BarWhereInput
  createdBars_some: BarWhereInput
  createdBars_none: BarWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
