type Query {
    getBars: [Bar!]
    bar(id: ID!): Bar!
}

type Mutation {
    createBar(createBarInput: CreateBarInput): Bar!
}

type Bar {
    id: ID!
    name: String!
    address: String!
    # TODO limit lat long by prague
    lat: String!
    long: String!
    phone: String
    openTime: DateTime
    closeTime: DateTime
    photos: [String!]
    beers: [Beer!]
    barRating: [BarRating!]
    barComments: [BarComment!]
    barChanges: [BarChange!]
    beerPrices: [BeerPrice!]
    beerConnections: [BeerBarConnectionChange!]
    createdBy: User
    likedBy: [User!]
    createdAt: DateTime!
    updatedAt: DateTime!
}

type BarRating {
    id: ID!
    rating: Float!
    user: User
    bar: Bar!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type BarComment {
    id: ID!
    comment: String!
    bar: Bar!
    user: User
    createdAt: DateTime!
    updatedAt: DateTime!
}

type BarChange {
    id: ID!
    field: String!
    newValue: String!
    user: User
    bar: Bar!
    upvotes: [BarChangeUpvote!]
    createdAt: DateTime!
    updatedAt: DateTime!
}

type BarChangeUpvote {
    id: ID!
    user: User
    barChange: BarChange!
    createdAt: DateTime!
}

input CreateBarInput {
    name: String!
    address: String!
    lat: String!
    long: String!
    openTime: DateTime
    closeTime: DateTime
    photos: [String!]
    beerIds: [String!]
}
