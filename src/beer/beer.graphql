type Query {
    getBeers: [Beer!]
    beer(id: ID!): Beer!
}

type Mutation {
    createBeer(createBeerInput: CreateBeerInput): Beer!
    commentBeer(commentBeerInput: CommentBeerInput): BeerComment!
    rateBeer(rateBeerInput: RateBeerInput): BeerRating!
}

type Beer {
    id: ID!
    name: String!
    brewery: Brewery!
    photo: String
    description: String
    bars: [Bar!]
    beerRating: [BeerRating!]
    comments: [BeerComment!]
}

type BeerRating {
    id: ID!
    user: User!
    beer: Beer!
    rating: Int!
}

type BeerComment {
    id: ID!
    beer: Beer!
    user: User!
    comment: String!
    timestamp: DateTime!
}

input RateBeerInput {
    beerId: ID!
    rating: Int!
}

input CreateBeerInput {
    name: String!
    breweryId: ID!
    description: String
    photo: String
}

input CommentBeerInput {
    beerId: ID!
    comment: String!
}
