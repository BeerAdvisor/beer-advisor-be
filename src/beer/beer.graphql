type Query {
    getBeers: [Beer!]
    beer(id: ID!): Beer!
}

type Mutation {
    createBeer(createBeerInput: CreateBeerInput): Beer!
    commentBeer(commentBeerInput: CommentBeerInput): BeerComment!
    rateBeer(rateBeerInput: RateBeerInput): BeerRating!
}

type Beer {
    id: ID!
    name: String!
    type: String!
    strong: String
    photo: String
    brewery: Brewery
    bars: [Bar!]
    beerRating: [BeerRating!]
    beerPrices: [BeerPrice!]
    beerComments: [BeerComment!]
    beerChanges: [BeerChange!]
    createdBy: User!
    likedBy: [User!]
}

type BeerRating {
    id: ID!
    rating: Float!
    user: User!
    beer: Beer!
}

type BeerComment {
    id: ID!
    comment: String!
    beer: Beer!
    user: User!
    createdAt: DateTime!
}

type BeerChange {
    id: ID!
    price: Float!
    field: String!
    newValue: String!
    user: User!
    beer: Beer!
    upvotes: [BeerChangeUpvote!]
    createdAt: DateTime!
}

type BeerChangeUpvote {
    id: ID!
    user: User!
    beerChange: BeerChange!
}

type BeerPrice {
    id: ID!
    price: Float!
    user: User!
    bar: Bar!
    beer: Beer!
}

input RateBeerInput {
    beerId: ID!
    rating: Int!
}

input CreateBeerInput {
    name: String!
    type: String!
    photo: String
    strong: String
    breweryId: String
    barIds: [String!]
}

input CommentBeerInput {
    beerId: ID!
    comment: String!
}
